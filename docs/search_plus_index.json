{"./":{"url":"./","title":"Tutorial","keywords":"","body":"Tutorial for EasyMultiProfiler package =4.3-brightgreen.svg\" referrerpolicy=\"no-referrer\">   Tutorial edited by Bingdong Liu✉️, Yaxi Liu and Liwei Xie✉️ 2024-07 The EasyMultiProfiler package aims to offer a user-friendly and efficient multi-omics data analysis tool on the R platform. It facilitates various essential tasks related to microbiome, genome, and metabolite downstream analysis, providing a seamless workflow from start to finish. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 14:31:42 "},"MD/1 EasyMultiProfiler初识.html":{"url":"MD/1 EasyMultiProfiler初识.html","title":"Chapter 1 Introduction","keywords":"","body":"1. EasyMultiProfiler EasyMultiProfilerpackage adopts object-oriented programming method, integrates multiple data analysis modules, and realizes smooth data transfer between different modules, thus standardizing and clarifying the overall analysis process. EasyMultiProfiler not only includes the current mainstream data pre-processing methods, but also has powerful analysis capabilities. It covers a variety of mainstream analysis methods (including diversity analysis, cluster analysis, correlation analysis, difference analysis and dimensionality reduction analysis, etc.), and also supports GSEA analysis, WGCNA analysis and multi-omics analysis. Users are able to quickly explore data features and patterns and visually interpret analysis results in a variety of visualizations, including box plot, scatter plot, enriched dot plot, enriched network plot, bivariate plot, enriched curve plot, heat map, sankey plot, and structural histogram. All in all, EasyMultiProfiler provides users with a one-stop data processing, analysis, and visualization service, greatly simplifying intermediate processes, and is logically clear and very beginner-friendly. 1.1 EasyMultiProfiler Installation 1.1.1 First installation (1) Mac os users: install using pak package. if (!requireNamespace(\"pak\", quietly=TRUE)) install.packages(\"pak\") pak::pak(\"liubingdong/EasyMultiProfiler\") library(EasyMultiProfiler) (2) Windows users: step1： install RTool According to the installed R version, install the corresponding version of RTool (e.g. R 4.3.x requires RTool 4.3, R 4.4.x requires RTool 4.4). RTool download address 1: official original address; download address 2: Chinese mirror address. RTool installation steps: On the download page, click[Download R for Windows] →[Rtools]) step2: After successfully installing the corresponding version of RTool, please restart R. Step3: Install EasyMultiProfiler package using pak package. if (!requireNamespace(\"pak\", quietly=TRUE)) install.packages(\"pak\") pak::pak(\"liubingdong/EasyMultiProfiler\") library(EasyMultiProfiler) Note： Common installation failure error causes: click here. 1.1.2 Update version EasyMultiProfiler is constantly updating more analysis and visualization modules, and when an update is needed, it can be updated by running pak package again. pak::pak(\"liubingdong/EasyMultiProfiler\") library(EasyMultiProfiler) 1.2 EasyMultiProfiler Basics 1.2.1 Data Object Container for EasyMultiProfiler MAE object: namely MultiAssayExperiment . MAEobject is an object that users need to create initially. It is usually composed of assay and corresponding coldata and rowdata of multiple omics projects (see Section 1.2.2 for relevant definitions).MAE object of single omics project can also be created. EMPT object: namelyEMP-transporter. EMPTobject is extracted from MAEobject. EMPTobject inheritsSummarizedExperiment data storage object, mainly includingassay,rowdata,coldata and parameters required for various process analysis. EMPobject: When multiple EMPT objects are analysed jointly, they can be merged into one EMP object. Note： ① In order to ensure the original data is not tampered with as much as possible, the process from MAE to EMPT during data analysis is unidirectional, meaning that an EMPT object cannot be put back into an MAE object. ②If you need to modify the EMPT object within the MAE object, simply adjust the EMPT object, and reassemble it into the MAE object. ③When conducting joint analysis, the EMPT objects can be directly combined using the + symbol to form EMP objects, thus facilitating the process of multi-omics analysis. ④When the names of the projects involved in the combination are the same, the name of the subsequent project will be automatically modified to ensure the uniqueness of the project names in the EMPT object. 1.2.2 Data Composition of EasyMultiProfiler Each project data stored in the MAE object contains the following three contents: assay、coldata 、rowdata. assay refers to the experimental data of the project; coldata refers to the sample-related data; and rowdata refers to the feature-related data. Assay Coldata Rowdata Column Feature Sample related data Feature related data Row Sample ID Sample ID Feature 1.2.3 Data Presentation of EasyMultiProfiler EasyMultiProfiler package uses tibble format (a data frame type) to present data, where under the tibble column names, users can view the corresponding column data types. Common data types include: int - integer type, dbl - floating point type, chr - string type, lgl - logical type (True and False), fct - factor type, date - date type, dttm - datetime type. 1.2.4 Data Transfer of EasyMultiProfiler EasyMultiProfiler package uses |> operator to facilitate data transfer, where the output of the previous module serves as the input for the next module (similar to the function of the %>% operator in package Magrittr ), thus enabling sequential data processing operations. Because EMPT objects are passed through the data analysis process, there is little mandatory analysis order throughout the process. Users are free to explore data analysis in individual modules without worrying about matching data delivery. 1.2.5 Action Parameters of EasyMultiProfiler When the EasyMultiProfiler package performs data analysis, project data is stored in EMPT object and passed between functional modules. After the user completes the analysis of a module, the parameter action can be used to extract the original analysis results generated by the module. The default value of this parameter is action='add', which means that the analysis result of the current module will be added to the EMPT object for transmission; action='get', which means that the analysis result of the current module will be directly output. Note： The parameter action in the module EMP_filter is used to specify whether the module operation is to kick or select. 1.2.6 Caching Mechanism of EasyMultiProfiler The main analysis modules of EasyMultiProfiler package have a cache snapshot mechanism, that is, when the same data is used for analysis repeatedly, the analysis process will automatically extract the corresponding data analysis results from the cache according to the hash value, so as to avoid double calculation. This caching feature greatly improves the convenience of the analysis process and avoids the need to create multiple intermediate variables in traditional data analysis to store complex computing results. Users only need to pass the current calculation results through the |> operator to successfully complete each analysis step, making the entire analysis process clearer and more concise. Note： ① The caching mechanism takes into account the differences between data, parameters and modules, and eliminates the possible data conflicts. ② If you need to recalculate, you can specify parameter use_cached=FALSE to cancel the cache of this module. &#x1F3F7;️Example：The first calculation takes about 7 seconds. When it was calculated again, it took only 0.004 seconds. data(MAE) ## First run system.time({ MAE |> EMP_assay_extract('geno_ec') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85) }) ## Second run system.time({ MAE |> EMP_assay_extract('geno_ec') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85) }) ## Close the cached system.time({ MAE |> EMP_assay_extract('geno_ec') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85,use_cached = FALSE) }) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-19 20:01:22 "},"MD/2 创建MAE对象.html":{"url":"MD/2 创建MAE对象.html","title":"Chapter 2 Import data","keywords":"","body":"2. Create MultiAssayExperiment Object This section illustrates how to import data from multi-omics projects into the analysis process. 2.1 Multi-omics Data When the user processes data from multi-omics projects, the data needs to be imported and combined into a MAE object. 2.1.1 Create a relationship table of sample ID and subject ID In the study, each subject has a unique subject ID (e.g., P1, P2, P3...), and each subject may collect a variety of biological samples and measure corresponding data, including species annotation (taxonomy) for 16s rRNA gene sequencing, KO annotation (geno_ko) for microbial functional genes, eczymatic annotation (geno_ec) for microbial functional genes, etc. When analyzing data from one or more projects, in most cases the subject ID and sample ID are the same (e.g., subject ID P1, project name taxonomy, sample ID P1). But sometimes we also face the following situations: Only single-omic project: the subject ID and the sample ID are inconsistent (e.g., subject ID P1, project name taxonomy, sample ID tax_1); Multi-omics projects: Within the same subject, sample ID of different projects are inconsistent (e.g., subject ID P1; project name taxonomy, sample ID tax_1; project name geno_ko, sample ID genomics_1). Therefore, in order to effectively manage and analyse this data, users need to create a relationship table (usually named DFMAP, users can also customize) to match the subject ID to the sample ID. Based on the relationship table, users are able to easily import all the data into the MultiAssayExperiment object. During subsequent analysis, the EasyMultiProfiler package automatically replaces the sample ID the subject ID according to the relationship table. The relationship table-based analysis process has the following benefits: Data Integration and Consistency: Relationship table ensure that the sample information in the datasets of different projects is properly mapped and integrated, thus ensuring data consistency. Automated processing: Data can be managed and processed automatically without manual modifications, so you don't have to worry about inconsistent naming. Streamlined analysis workflow: Consolidating data and automatically replacing sample ID with subject ID makes the analysis process smoother and clearer, reducing errors that can result from manual processing. Note：Do not confuse \"Project Name\", \"Subject ID\", and \"Sample ID\". &#x1F3F7;️Example: Create a relationship table of subject ID and sample ID. This table needs to be saved as a file and read into R. Users can also manually create data frame directly within R. dfmap Note： ①The relationship table must consist of the following three columns: assay (project name), primary (subject ID), colname (sample ID). ②The sample ID (e.g., tax_1, genomics_1, etc. in this tutorial) is generated by the upstream annotation. ③The sample ID is allowed to be same as the subject ID (e.g., subject ID P1, project name taxonomy, sample ID P1). ④The sample ID (or the subject ID corresponding to the sample ID) of each project must be a subset (or identical) of the subject ID of the sample-related data. If the sample ID in the project do not correspond to the subject ID in the sample-related data, these sample ID should be excluded from these projects. ⑤The sample ID of each omics item must correspond to the colname of the relationship table one by one. ⑥For the numbering scheme of project data before and after intervention in the same group of subjects, please refer to section 10.3. 2.1.2 Precautions for reading sample-related data Sample-related data refers to the basic information of the subject, usually including: the subject's general demographic data (gender, age, residence, etc.), anthropometric data (height, weight, waist circumference, etc.), psychological scale score results (anxiety scale, depression scale, sleep scale, etc.), test results (blood routine, liver function, inflammatory factors, etc.). Note: ① If there are missing values in the sample-related data, please leave them blank directly without using placeholders like NA, -, missing, etc. ② Please set the first column of the sample-related data as the Sample ID, and set it as the row names when reading (important). ③ Sample ID must be unique and cannot be duplicated. ④ It is recommended to set the values of categorical variables in the data as strings rather than pure numbers to avoid unnecessary issues. ⑤ For the numbering scheme of project data before and after intervention for the same group of subjects, please refer to Chapter 10.3. ## row.names=1 meta_data 2.1.3 Read microbiome data Microbiome data refers to the result files containing the abundance information of microorganisms in each sample, which are generated by various upstream microbial annotation tools. Common result files include the following five types: ASV/OTU tables, abundance tables (kingdom, phylum, class, order, family, genus and species-level), generic-level abundance tables generated by MetaPhlan and Humann, Biom files, and QZV files specific to QIIME2. The module EMP_taxonomy_import supports the input of result files in all of the above formats and converts them into SummariseExperiment objects. 2.1.3.1 ASV/OTU forms The # characters on the first and second lines of this file do not need to be modified. The data file must contains species annotation information. Note: ① The data file must include a column named taxonomy. ② The taxonomy column must contain microbial annotation. ③ It is recommended to use ; character to separate microbial annotations. tax_data 2.1.3.2 Abundance table (Kingdom, Phylum, family, genus, and species-level) Since high-taxonomic data can be converted to low-taxonomic data (e.g., Species data can be converted to Phylum data), it is recommended that users directly import data at the highest taxonomy level. Note: Module EMP_taxonomy_import has a parameter assay_name which defaults to counts (absolute abundance). If the actual data is in relative abundance, you can input relative. tax_data 2.1.3.3 Classification annotation table for MetaPhlan and Humann The species annotations of this annotation table have a hierarchical structure and usually contain all the result information at each level of the genus and species of the phylum family. The module EMP_taxonomy_import can automatically identify annotation information at the highest classification level and import the complete classification data. Note: When the input data is in this format, users need to specify the parameter humann_format=TRUE within the module EMP_taxonomy_import. tax_data 2.1.3.4 Biom format files The biom format is a common species annotation result file in the QIIME1 process, and some users will also save the species annotation file of the QIIME2 process in biom format for data storage. The module EMP_taxonomy_import can directly read the biom format file and import the data information. Note: When the input data is in this format, users need to specify the parameter file_format='biom' within the module EMP_taxonomy_import. tax_data 2.1.3.5 Tabular files converted from Biom format files Biom files can be converted into tabular files using the Biom Convert method, or imported directly. 注意： When the input data is in this format, users do not need to modify the header and # character. tax_data 2.1.3.6 QZV format file In the Qiime2 process, the qiime taxa barplot generates a QZV file of microbial annotation results. The module EMP_taxonomy_import can directly read the QZV format file and import the data information. Note: When the input data is in this format, users need to specify the parameter file_format='qzv' within the module EMP_taxonomy_import. tax_data 2.1.4 Read KO/EC omics data 2.1.4.1 Ordinary tabular form KO/EC omics project data in common format refers to metagenomic or metatranscriptomic annotated result files annotated with KO or EC ID. The module EMP_function_import can directly read the annotation table and query the corresponding annotation information integrated by the KEGG database. Note: ① In the encoding, use only pure KO and EC ID, for example: instead of KO:K00010, use only K00010; instead of ec:1.1.1.1, use only 1.1.1.1. ② Within the module EMP_function_import, the parameter assay_name defaults to counts (absolute abundance). Users should input TPM, FPKM, etc., based on the actual data. ko_data 2.1.4.1 Humann format KO/EC omics project data in Humann format refers to the hierarchical KO/EC annotation tables generated by the Humann tool. The module EMP_function_import ignores the information of UNGROUPED, directly reads the comment table, and queries the KEGG database to integrate the corresponding comment information. 注意： The header of the file needs to be cleaned up and characters such as # removed. ko_data 2.1.5 Read standard table information Standard tabular data usually refers to data such as transcriptome or metabolome, which has no special format and can be imported directly. 2.1.5.1 Data import without feature annotation information This data is commonly used in transcriptome or genomic data, with \"rows\" as features and \"columns\" as samples. tran_data 2.1.5.2 Data import containing feature annotation information This data is commonly used in metabolomics data, with \"rows\" as features and \"columns\" as sampleID and feature-related annotations. When importing this kind of data, users need to specify a sampleID column. Note: ① Users can directly specify the sampleID using parametersampleID. ② Users can directly specify the sampleID using the relationship table. # specify the sampleID using parameter sampleID sample_ID 2.1.6 Integrate all data into the MultiAssayExperiment object Note: ① In this example, dfmap refers to the relationship table in section 2.1.1. ② The assay column in the relationship table must be converted to a factor. ③ Names in objlist must match the project names in the assay column of the relationship table. ④ If assembly fails, users can check the data using the module MultiAssayExperiment::prepMultiAssay(objlist, meta_data, dfmap). ⑤ For more detailed information about the MultiAssayExperiment package, refe to this tutorial. #### The assay column in the relationship table must be converted to a factor dfmap$assay 2.2 Quickly create a MultiAssayExperiment object for a single-omic project When the users only have a single-omic project data (for example, microbiome project data or transcriptomics project data), the module EMP_easy_import can be used to quickly build a MAE object and directly perform downstream analysis processes. Note: ① The parameter type includes four options: tax, ko, ec, and normal. Users should determine which to use based on the context. ② For single-omic project where no relationship table is involved, the sampleID in the abundance matrix must match those in the associated sample data. ## row.names=1 meta_data 2.3 MultiAssayExperiment object storage and reading Once the MAE object has been created, it can be stored locally for direct reading during the next analysis without having to repeat the creation step. Note： Before storing, make sure to set R's local working directory correctly, and the data files will be stored in this working directory. # Save in your working diectory saveRDS(MAE,file = 'MAE.rds') # Load the object MAE Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-12 21:51:26 "},"MD/3 EasyMultiProfiler内置示例MAE对象.html":{"url":"MD/3 EasyMultiProfiler内置示例MAE对象.html","title":"Chapter 3 Demo data","keywords":"","body":"3. EasyMultiProfiler Demo Data The EasyMultiProfiler package includes a built-in sample MAE object that contains sample data from a clinical study with a cross-sectional study design (not from a real study) involving five omics items of stool samples. taxonomy（species annotation for 16s rRNA gene sequencing） geno_ko（KO annotation of microbial functional genes） geno_ec（EC enzyme annotation of microbial functional genes） untarget_metabol（untargeted metabolomics data） host_gene（host genetic data） 3.1 Load MAE object data(MAE) 3.2 Overview the project data EasyMultiProfiler package provides a quick data overview module, which allows users to quickly view the data stored in the MAE object from three dimensions. Data disinfection displays the number of samples and features of the experimental data in each project, as well as the data format of the experimental data in the project (including FPKM, relative, TPM, etc.; Specified by the user at the time of import). Data information shows the number of classifications of sample-related data (e.g., the number of types of basic information about the subject) and the number of classifications of character-related data (e.g., kingdom, phylum, class, order, family, genus, and species of microbiome data). Data miss shows the absence of samples and features of experimental data. See section 7.4 of this tutorial for details. EMP |> EMP_summary() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 13:39:12 "},"MD/4 数据提取 Data Extract.html":{"url":"MD/4 数据提取 Data Extract.html","title":"Chapter 4 Data Extract","keywords":"","body":"4. Data Extract The module Data Extract consists of three sub-modules: EMP_assay_extract, EMP_coldta_extract, and EMP_rowdata_extract. These modules assist users in extracting specific project data from the MAE object for subsequent downstream analysis. To help users better understand the relationships between assay, coldata, and rowdata, this section illustrates examples of species annotation (taxonomy) from 16S rRNA gene sequencing, along with corresponding annotations for microbial functional genes such as KO annotations (geno_ko) and EC enzyme annotations (geno_ec). 4.1 Extract assay (experimental data) &#x1F3F7;️Example 1: Extract the assay of taxonomy and obtain the species annotated abundance matrix. MAE |> EMP_assay_extract(experiment='taxonomy') &#x1F3F7;️Example 2: Extract the assay of taxonomy, find the features of Lactobacillus in the Genus column of roldata by specifying the parameters pattern_refand pattern, and further extract the species annotation abundance matrix corresponding to these features in the assay. Note: ① The module EMP_assay_extract provides internal retrieval parameters to facilitate quick discovery of abundance matrix for features of interest. ② Both parameter pattern and pattern_ref here are used for string matching and searching based on rowdata. ③ Specify the parameter action='get' to directly extract the data frame of the data matrix. MAE |> EMP_assay_extract(experiment='taxonomy', pattern = 'Lactobacillus',pattern_ref = 'Genus') &#x1F3F7;️Example 3: Extract the assay of geno_ko, find the puua or puuc features in the Name column of roldata by specifying the parameters pattern_ref and pattern,and further extract the KO annotation abundance matrix corresponding to these features in the assay. Note: Both parameter pattern and pattern_ref here are used for string matching and searching based on rowdata. MAE |> EMP_assay_extract(experiment='geno_ko', pattern = c('puua','puuc'),pattern_ref = 'Name') 4.2 Extract rowdata (feature-related data) Note: ① When the module EMP_rowdata_extract specifies a project name, the output is feature-related data of the project (For example, specifying EMP_rowdata_extract(experiment='taxonomy', outputs taxonomic annotations at the kingdom, phylum, class, order, family, genus, and species levels for the features. Specifying EMP_rowdata_extract(experiment='geno_ko') outputs relevant information from the KEGG database for corresponding KO genes. If the parameter experiment is not specified, it outputs all the feature-related data within the MAE object. ② This module does not support the parameter action. &#x1F3F7;️Example 1: Extract the rowdata of taxonomy. MAE |> EMP_rowdata_extract(experiment='taxonomy') &#x1F3F7;️Example 2: Extract the rowdata of geno_ko. MAE |> EMP_rowdata_extract(experiment='geno_ko') &#x1F3F7;️Example 3: Extract the assay of geno_ko, find the puua features in the Name column of rowdata by specifying the parameters pattern_ref and pattern, and extract the KO annotation abundance matrix corresponding to these features in the assay. Finally, view the information related to the puua features. MAE |> EMP_assay_extract(experiment='geno_ko', pattern = 'puua',pattern_ref = 'Name')|> EMP_rowdata_extract() 4.3 Extract coldata (sample-related data) Note: When module EMP_coldata_extract specifies an project name internally, it outputs sample-related data for the samples of the project. If the parameter experiment is not specified, it outputs sample-related data for all samples in the entire MAE object. &#x1F3F7;️Example 1: Extract the coldata of taxonomy. MAE |> EMP_coldata_extract(experiment='taxonomy') &#x1F3F7;️Example 2: Convert the sample related data (coldata) into experimental data (assay) and perform difference analysis. The EasyMultiProfilerpackage uses assay by default for process profiling. If the user needs to analyse coldata, the parameteraction='add' should be specified to convert coldata to assay, and then perform various module analysis. Note: ① In the module EMP_coldata_extract, the parameter coldata_to_assay can specify the conversion of specific coldata to assay. ② In the module EMP_coldata_extract, when the parameter coldata_to_assay is omitted, all continuous variables in coldata are converted to assay by default. MAE |> EMP_coldata_extract(experiment='taxonomy',action='add',assay_name = 'counts') |> EMP_diff_analysis(method = 'wilcox.test',estimate_group = 'Group') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 11:58:37 "},"MD/5 数据预处理 Data Preparetion.html":{"url":"MD/5 数据预处理 Data Preparetion.html","title":"Chapter 5 Data Preparation","keywords":"","body":"5. Data Preparation Data preprocessing refers to processing raw data through a series of steps and techniques to ensure the quality and usability of the data and lay a solid foundation for subsequent analysis and modeling. The EasyMultiProfiler package provides a variety of common pre-processing methods in data analysis processes, covering critical steps such as standardization, batch calibration, filter analysis, feature transformation, and feature folding. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-19 17:55:49 "},"MD/5.1 数据折叠 EMP_collapse.html":{"url":"MD/5.1 数据折叠 EMP_collapse.html","title":"5.1 EMP_collapse","keywords":"","body":"5.1 EMP_collapse Data collapse refers to merging the original assay to generate a new assay. EMP_collapse can work based on the specified data in rowdata or coldata. Users can calculate the average, median, sum, maximum, or minimum as the combined result during the folding process. 5.1.1 Merge assays based on duplicate coldata EMP_collapse can collapse the assay according to the annotation in the coldata. &#x1F3F7;️Example: Merge the assay data according to the column Group in the coldata. Original assay： MAE |> EMP_assay_extract(experiment='taxonomy') Folded assay: Extract the assay from taxonomu experiment. The parameter estimate_group specifies that the data should be aggregated based on the Group column in coldata. The parameter collapse_by indicates that aggregation should be performed according to the col column in coldata. The parameter collapse_sep specifies that the + delimiter should be used to concatenate the string cells in the coldata where aggregation occurs. MAE |> EMP_assay_extract(experiment='taxonomy') |> EMP_collapse(collapse_by='col',estimate_group = 'Group', method = 'mean',collapse_sep = '+') Folded coldata: 注意： Although the data aggregation operation essentially involves collapsing the assay, the assay, coldata, and rowdata are intrinsically linked from the moment the MAE object is created. Therefore, during the collapse process, the coldata is also aggregated accordingly. For continuous variables in coldata, the aggregation method used will be the same as that for the assay. For categorical variables in coldata, the specified collapse_sep delimiter will be used to concatenate the data. MAE |> EMP_assay_extract(experiment='taxonomy') |> EMP_collapse(collapse_by='col',estimate_group = 'Group', method = 'mean',collapse_sep = '+') |> EMP_coldata_extract() 5.1.2 Merge assays based on duplicate rowdata EMP_collapse can collapse the assay according to the annotation in the rowdata. &#x1F3F7;️Example 1: Merge the assay data according to the column Class in the rowdata. In microbiome studies, the EMP_collapse function can rapidly aggregate the features of the assay from higher taxonomic levels (such as phylum or genus) to lower levels by specifying the estimate_group parameter. Note： After collapsing the assay based on rowdata, the feature of the assay will change, but the sample remains still. In this example, features originally at the species level are aggregated to the Class level. MAE |> EMP_assay_extract(experiment='taxonomy') |> EMP_collapse(collapse_by='row',estimate_group = 'Class', method = 'sum',collapse_sep = '+') &#x1F3F7;️Example 2: Merge the assay metabolite data according to rowdata. 注意： ①In metabolomics projects, metabolites often have multiple annotation levels. Users can quickly aggregate the assay data according to the annotation level of metabolites in rowdata. ②The features used for aggregation must be present in rowdata (for example, the assay in the geno_ko project cannot be collapsed according to the Class column in rowdata). Users can use the function EMP_rowdata_extract to view the feature annotation available for aggregation. Original assay： MAE |> EMP_assay_extract(experiment = 'untarget_metabol') Folded assay: Merge the assay data according to the column MS2kegg in the rowdata. Note： In some metabolomics raw data, symbols such as NA, null, and - are commonly used to represent missing values. The parameter na_string allows users to specify these strings as missing values. During data aggregation, any rows containing missing values in the specified features for merging will be ignored. MAE |> EMP_assay_extract(experiment = 'untarget_metabol') |> EMP_collapse(estimate_group = 'MS2kegg',collapse_by='row', na_string = c(\"NA\", \"null\", \"\",\"-\"), method = 'mean',collapse_sep = '+') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 18:58:42 "},"MD/5.2 批次校正 EMP_adjust_abudance.html":{"url":"MD/5.2 批次校正 EMP_adjust_abudance.html","title":"5.2 EMP_adjust_abudance","keywords":"","body":"5.2 EMP_adjust_abudance Batch effect refers to systematic variation caused by various factors during data collection, which is independent of the study variable. Batch effects are usually caused by the following reasons: different parts of the experiment are completed at different times, changes in experimental conditions (including instruments, reagent batches, reagent dosage, sequencing batches, etc.), different data sources (for example: integrating your own data set with public data sets for analysis), etc. The existence of batch effects may affect data analysis and result interpretation, and ordinary standardization methods are not enough to adjust the differences between batches. The module EMP_adjust_abudance can help users effectively solve the correction problem of batch effects. It contains the three most commonly used correction methods: combat_seq, combat, and limma_remove_batch_effect. These methods can improve the comparability and reliability of data by reducing batch effects. Note：Before performing batch calibration, it is necessary to integrate the project data from different batches into a single data file. 5.2.1 Combat method This module references the comBat algorithm of the sva package to correct batch effects. comBat uses parametric or nonparametric empirical Bayesian models to correct batch effects. The input data is the cleaned and standardized expression data, and the returned data is an expression matrix that has been corrected for batch effects. &#x1F3F7;️Example： Use module EMP_assay_extract to extract the assay of geno_ko . Utilize parameter .factor_unwanted within module EMP_adjust_abudance to specify factors of no interest (factors requiring batch correction) as Region , parameter .factor_of_interest to specify factors of interest as 'Group' , and parameter method to specify the use of 'combat' method for batch effect correction. MAE |> EMP_assay_extract(experiment='geno_ko') |> EMP_adjust_abundance(.factor_unwanted = 'Region',.factor_of_interest = 'Group', method = 'combat') 5.2.2 Combat_seq method This module uses the module comBat_seq of the sva package to correct batch effects. comBat_seq is an improved model of combat, using negative binomial regression, specifically for RNA-Seq count data. &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment='geno_ko') |> EMP_adjust_abundance(.factor_unwanted = 'Region',.factor_of_interest = 'Group', method = 'combat_seq') 5.2.3 Limma_remove_batch_effect method This module references the module removeBatch Effect of the limma package to correct batch effects. This module is typically used to remove batch effects from microarray data or RNA sequencing data. &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment='geno_ko') |> EMP_adjust_abundance(.factor_unwanted = 'Region',.factor_of_interest = 'Group', method = 'limma_remove_batch_effect') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:29:07 "},"MD/5.3 实验数据的特征转换 EMP_feature_convert.html":{"url":"MD/5.3 实验数据的特征转换 EMP_feature_convert.html","title":"5.3 EMP_feature_convert","keywords":"","body":"5.3 EMP_feature_convert In studies, the naming of genes varies depending on the database used. Therefore, for transcriptomic enrichment analysis, gene names need to be converted to their corresponding unique ID (often called ENTREZID). In metabolomics analysis, there is also the problem of ID conversion among multiple databases. Module EMP_feature_convert provides easy conversion of gene ID and metabolite ID between multiple databases. 5.3.1 Conversion for Gene ID &#x1F3F7;️Example： Before conversion： MAE |> EMP_assay_extract(experiment='host_gene') After conversion： Note: This package includes reference gene sets for four commonly used species: Human, Mouse, Pig, and Zebrafish. If your data pertains to a different species, you can specify the corresponding reference dataset using the parameter OrgDb. Click here for more species details. MAE |> EMP_assay_extract(experiment='host_gene') |> EMP_feature_convert(from = 'SYMBOL',to = 'ENTREZID',species = 'Human') 5.3.2 Conversion for Metabolite ID &#x1F3F7;️Example： Before conversion： MAE |> EMP_assay_extract(experiment = 'untarget_metabol')|> EMP_collapse(na_string=c('NA','null','','-'), estimate_group = 'MS2kegg',method = 'sum',collapse_by = 'row') &#x1F3F7;️After conversion： Convert metabolite from Compound annotation of KEGG to ID annotation of Human Metabolome Database. MAE |> EMP_assay_extract(experiment = 'untarget_metabol'), EMP_collapse(na_string=c('NA','null','','-'), estimate_group = 'MS2kegg',method = 'sum',collapse_by = 'row') |> EMP_feature_convert(from = 'KEGG',to='HMDB') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:29:32 "},"MD/5.4 数据标准化 EMP_decostand.html":{"url":"MD/5.4 数据标准化 EMP_decostand.html","title":"5.4 EMP_decostand","keywords":"","body":"5.4 EMP_decostand In multi-omics data analysis, the differences in dimension and magnitude of different data may lead to bias in analysis results. Standardized methods are therefore needed to eliminate these differences. Module EMP_decostand inherits the module decostand of vegan package, which can easily normalize data using logarithmic ratio, relative value, central logarithmic ratio, etc. Note: In the module EMP_decostand, the parameter bySample can specify whether to standardize by sample or by feature. If no specific setting is provided, the parameter bySample will follow the recommendations in the vegan package. 5.4.1 Standardization of microbiome data &#x1F3F7;️Example： Extract the assay of taxonomy and collapse it according to the Family column of rowdata, and convert the absolute abundance of the features of the collapsed assay into relative abundance. MAE |> EMP_collapse(experiment='taxonomy',estimate_group = 'Family',collapse_by = 'row') |> EMP_decostand(method = 'relative') 5.4.3 Standardization of genomic data &#x1F3F7;️Example： Extract the assay of host_gene and perform log conversion. Note： When log, pa, and integer normalization methods are used, there is no need to consider the normalization direction. MAE |> EMP_decostand(experiment = 'host_gene',method = 'log',logbase = 2) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:29:42 "},"MD/5.5 数据插补 EMP_impute.html":{"url":"MD/5.5 数据插补 EMP_impute.html","title":"5.5 EMP_impute","keywords":"","body":"5.5 EMP_impute Data imputation is estimating or populating missing values in a dataset by an algorithm when those missing values exist. The goal is to provide reasonable estimates of where missing values are located so that these data can be better utilized in subsequent data analysis or modeling. The module EMP_impute performs data interpolation based on the Chained Random Forests (CRF) algorithm. This algorithm is more scientific than the traditional mean or mode interpolation method. It can be used not only to impute continuous variables but also to impute categorical variables. ModuleEMP_impute supports data interpolation for assay, rowdata, and coldata. 5.5.1 Impute coldata （Sample-Related Data） Coldata of the project refers to sample-related data, which often have different degrees of missing values. Common causes of missing values include errors or omissions in the data collection process, withdrawal of subjects from the study, technical problems (e.g., equipment failure or data transmission errors), etc. The module EMP_impute can impute missing values of coldata based on the CRF algorithm. &#x1F3F7;️Example： Before imputation： coldata has lots of missing values. MAE |> EMP_assay_extract('geno_ec') |> EMP_coldata_extract() After imputation： impute all missing values of coldata. MAE |> EMP_assay_extract('geno_ec') |> EMP_impute() |> EMP_coldata_extract() Users can also impute only partial missing values of coldata. For example, only missing values for PHQ9 and GAD7 are imputed. MAE |> EMP_assay_extract('geno_ec') |> EMP_impute(.formula = PHQ9+GAD7 ~ .) |> EMP_coldata_extract() 5.5.2 Impute assay (Experimental data) When there are no missing values in the assay, imputation using the module EMP_impute prompts \"Assay data has no NA value! \". 5.5.3 Impute rowdata （feature-related data） Rowdata of the project refers to feature-related data, and its missing values are mainly caused by imperfect database annotations. Therefore, although the module EMP_impute supports the interpolation of rowdata using the parameterrowdata=T, the interpolation result is difficult to meet the actual needs, so it is not recommended to impute rowdata. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:30:00 "},"MD/5.6 确定核心数据 EMP_identify_assay.html":{"url":"MD/5.6 确定核心数据 EMP_identify_assay.html","title":"5.6 EMP_identify_assay","keywords":"","body":"5.6 EMP_identify_assay Traditional project data often have a large number of sparse features (e.g., microbial OTU/ASV annotation tables with a large number of very low abundance species), which may be caused by sample contamination, library errors, sequencing bias, or annotation failures. To simplify the calculation and reduce the interference of these sparse features, this module provides two methods to filter the raw data. 5.6.1 Core microbial data In the microbial species annotation results, it can be found that there are quite a lot of \"rare species\"(relatively low abundance or low frequency in the sample), which causes strong interference in identifying species with differences between groups, especially when screening key species. Machine learning algorithms (e.g. random forest, LEFse) can easily identify these \"rare species\" as \"different species\" between groups. Therefore, it is necessary to filter these \"rare species\" according to uniform criteria before formal analysis. The module EMP_identify_assay introduces two important parameters to help filter: minnum (minimum relative abundance) and min_ratio (minimum ratio). First, in microbial data, any abundance below the specified minimum relative abundance is converted to 0. Subsequently, when the number of samples above the minimum relative abundance in any group is greater than the minimum ratio of the total number of samples in that group, the species is considered a core species, and the rest are classified as rare species and filtered out. &#x1F3F7;️Example： Use the moduleEMP_assay_extract to extract the assay of taxonomy. Use the module EMP_identify_assay filter to obtain core species, the parameter estimate_group specifies Group as grouping information, the parametermin specifies minimum relative abundance as 0.01, and the parametermin_ratio specifies the minimum ratio as 0.7. Note: When the input microbial species annotation data is absolute abundance, the module EMP_identify_assay will automatically convert it to relative abundance during computation. This conversion facilitates filtering and identification of core species during the process, and subsequently outputs the corresponding absolute abundance data based on the filter condition. MAE |> EMP_assay_extract('taxonomy') |> EMP_identify_assay(estimate_group = 'Group', method = 'default', min=0.01,min_ratio = 0.7) 5.6.2 Core genomic data In genomic data, the edgeR package provides a filtering method based on minimum relative abundance, which can be easily invoked by the module EMP_assay_extract to filter genomic/transcriptome data. &#x1F3F7;️Example： MAE |> EMP_assay_extract('geno_ec') |> EMP_identify_assay(method = 'edgeR',min = 10,min_ratio = 0.7,estimate_group = 'Group') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:30:26 "},"MD/5.7 调整数据 EMP_modify_assay.html":{"url":"MD/5.7 调整数据 EMP_modify_assay.html","title":"5.7 EMP_modify_assay","keywords":"","body":"5.7 EMP_modify_assay In general, the module EMP_identify_assay can effectively process experimental data. However, in some special cases, manual adjustment of the data is required to solve the problem. 5.7.1 Adjusting Genomic Data In gene expression data, it sometimes happens that the expression of certain characteristics is all zero, which may cause some problems. To preserve as much information as possible, these zeros are sometimes replaced with a minimal non-zero value. This preserves the structure of the data to some extent while avoiding errors in numerical calculations. &#x1F3F7;️Example1：Use the module EMP_assay_extract to replace zeros in the assay of geno_ec with a pseudo-count of 0.0001. Before adjusting： MAE |> EMP_assay_extract('geno_ec') After adjusting： MAE |> EMP_assay_extract('geno_ec') |> EMP_modify_assay('==0',pseudocount=0.0001) &#x1F3F7;️Example2：Use the module EMP_modify_assay to convert absolute abundance values less than threshold 10 in the assay of geno_ec to pseudocount 5. MAE |> EMP_assay_extract('geno_ec') |> EMP_modify_assay(' &#x1F3F7;️Example3：Select specific samples and features for data adjustment. Note： The parameters select_feature and select_sample can be adjusted for specific sample and feature. MAE |> EMP_assay_extract('geno_ec') |> EMP_modify_assay('==0',pseudocount=0.0001, select_feature = c('1.1.1.102','1.1.1.11'), select_sample = c('P11774','P31579')) 5.7.2 Adjusting Microbial Species Annotation Data Microorganism species annotation data often contain species with minimal abundance, which may be caused by contamination, sequencing, or database alignment errors. Sometimes it is necessary to convert these extremely abundant data to zero. Note： This example is only for module function demonstration. To filter microbial species annotation data, please refer to 5.6 EMP_identify_assay. &#x1F3F7;️Example： Use the moduleEMP_modify_assay to convert data with a relative abundance of less than 0.001 of a genus level to 0. Before adjusting: MAE |> EMP_assay_extract('taxonomy') |> EMP_collapse(estimate_group = 'Genus',collapse_by='row') |> EMP_decostand(method = 'relative') After adjusting： Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:30:47 "},"MD/5.8 数据重抽样 EMP_rrarefy.html":{"url":"MD/5.8 数据重抽样 EMP_rrarefy.html","title":"5.8 EMP_rrarefy","keywords":"","body":"5.8 EMP_rrarefy When performing second-generation high-throughput sequencing, the sequencing depth of different samples varies. Especially when analyzing microbiome data, the minimum sequencing depth of samples in the data is usually taken as the standard, and the data of all samples are resampled with replacement, to ensure that the sequencing depth of all samples is at one level. 5.8.1 Display current genomic sequencing depth &#x1F3F7;️Example： MAE |> EMP_rrarefy(experiment = 'taxonomy',only_show_depth=T) 5.8.2 Resample at the minimum sequencing depth of samples within the current data Note： Since all samples reach the minimum sequencing depth threshold, the module EMP_rrarefy does not filter any samples. &#x1F3F7;️Example： MAE |> EMP_rrarefy(experiment = 'taxonomy') 5.8.3 Resample according to specified sequencing depth Note： Users can customize the sequencing depth threshold by specifying the parameter rasize, and any samples below this sequencing depth threshold will be filtered. At the same time, if some features are not present in all samples after resampling (i.e., the data is 0), these features will also be filtered. MAE |> EMP_rrarefy(experiment = 'taxonomy',raresize=8000) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-19 20:01:06 "},"MD/6 数据分析 Data Analysis.html":{"url":"MD/6 数据分析 Data Analysis.html","title":"Chapter 6 Data Analysis","keywords":"","body":"6. Data Analysis Welcome to this tutorial, which aims to provide users with a comprehensive guide to data analysis. Through this tutorial, users will learn how to use a variety of data analysis methods to process multi-omics data, including but not limited to data standardization, data collapsing, difference analysis, association analysis, enrichment analysis, feature screening, and other mainstream bioinformatics analysis methods. Each functional module can be easily and seamlessly connected to standardize and clarify the entire analysis process, ensuring the scientificity and repeatability of the analysis results. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:31:06 "},"MD/6.1 α多样性分析 EMP_alpha_analysis.html":{"url":"MD/6.1 α多样性分析 EMP_alpha_analysis.html","title":"6.1 EMP_alpha_analysis","keywords":"","body":"6.1 EMP_alpha_analysis Alpha diversity analysis is one of the most commonly used downstream microbial analysis methods, mainly used to assess the richness of species. The module EMP_alpha_analysis is based on relative abundance data and has built-in six common alpha diversity analysis methods (including: the Shannon index, Simpson index, Invsimpson index, observd_index, chao1, and ACE), and provides conventional statistical analysis and visualization functions. 6.1.1 Use absolute abundance for diversity analysis &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment='taxonomy') |> EMP_alpha_analysis() 6.1.2 Use relative abundance for diversity analysis Note： When relative abundance is used, some alpha indices (e.g. ACE, chao1) will not be calculated. &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment='taxonomy') |> EMP_decostand(method = 'relative') |> EMP_alpha_analysis() 6.1.3 Visualization of difference analysis result Note： The module EMP_boxplot can filter the required alpha diversity indicators by specifying the parameter select_metrics. &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment='taxonomy') |> EMP_alpha_analysis() |> EMP_boxplot(estimate_group='Group',method='t.test') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:32:13 "},"MD/6.2 聚类分析 EMP_cluster_analysis.html":{"url":"MD/6.2 聚类分析 EMP_cluster_analysis.html","title":"6.2 EMP_cluster_analysis","keywords":"","body":"6.2 EMP_cluster_analysis Cluster analysis falls under the domain of unsupervised learning in machine learning. It does not require predefined groups, instead, it investigates classification methods based on the inherent characteristics of the data and applies these methods to categorize the data reasonably. The result is grouping similar data into one set, which helps users uncover patterns and structures within the data, and identify outliers. 6.2.1 Cluster analysis of samples based on assay &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment = 'geno_ec') |> EMP_cluster_analysis() Clustering grouping tags can be specified through the parameter h. MAE |> EMP_assay_extract(experiment = 'geno_ec') |> EMP_cluster_analysis(h=0.15) Use module EMP_filter to filter outliers in groups 1 and 4. MAE |> EMP_assay_extract(experiment = 'geno_ec') |> EMP_cluster_analysis(h=0.15) |> EMP_filter(sample_condition = cluster != c(1,4)) 6.2.2 Cluster analysis of features based on assay Clustering analysis can be performed on features to quickly discover hierarchical relationships among interesting features. &#x1F3F7;️Example： Search for alcohol-related KO genes, and perform cluster analysis on the features. Note：This example identifies KO genes containing alcohol through searching for strings in the Name column of rowdata, rather than determining genes related to alcohol based on a knowledge graph. ```R MAE |> EMP_assay_extract(experiment='geno_ko', pattern = 'alcohol',pattern_ref = 'Name') |> EMP_cluster_analysis(rowdata = T) ``` ### 6.2.3 Cluster analysis of samples based on coldata In clinical data analysis, the sample-related data of the subjects typically includes basic information (such as dietary data, scale data, etc.). Module `EMP_colda_extract` can convert coldata into assay by specifying parameter `action='add'` , thus enabling downstream analysis. &#x1F3F7;️**Example：** Note： ①When there is a large amount of sample-related data in coldata, users can use the parameter coldata_to_assay to select the relevant sample-related data for conversion. If not specified, all continuous variables in coldata will be converted to assay by default. ②When the distance between some samples is missing due to missing values in certain features, the maximum default value of 1 will be used automatically. Users can modify the default value using the parameter pseudodist, or use the module EMP_impute to impute missing values before clustering analysis. MAE |> EMP_coldata_extract(action = 'add', coldata_to_assay = c('SAS','SDS','HAMA','HAMD','PHQ9','GAD7')) |> EMP_cluster_analysis() MAE |> EMP_coldata_extract(action = 'add', coldata_to_assay = c('SAS','SDS','HAMA','HAMD','PHQ9','GAD7')) |> EMP_cluster_analysis(rowdata=TRUE) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:32:40 "},"MD/6.3 相关性分析 EMP_cor_analysis.html":{"url":"MD/6.3 相关性分析 EMP_cor_analysis.html","title":"6.3 EMP_cor_analysis","keywords":"","body":"6.3 EMP_cor_analysis In multi-omics data analysis, it is common to observe the relationships between features through a correlation coefficient matrix. Note： The module EMP_cor_analysis automatically selects the intersection of data without missing values from two project datasets for analysis when calculating correlations. 6.3.1 Explore the correlation between microbial data and sample-related data &#x1F3F7;️Example1：Analysis of the correlation between microbial species annotation data and scale scoring data. Extract the assay of taxonomy, use module EMP_identify_assay to screen the core data, use module EMP_collapse to collapse out genus-level data, and use module EMP_decostand to standardize relative abundance. micro_data EMP_assay_extract('taxonomy') |> EMP_identify_assay(method='default') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_decostand(method='relative') micro_data Then, extract the assay of taxonomy from the MAE object, and further extract the scale score data of the corresponding coldata. meta_data EMP_assay_extract('taxonomy') |> EMP_coldata_extract(action = 'add', coldata_to_assay = c('SAS','SDS','HAMA','HAMD','PHQ9','GAD7')) meta_data Finally, the microbial abundance data and the scale score data are combined into an EMP object using the + symbol. The correlation analysis and visualization are completed using the modules EMP_cor_analysis and EMP_heatmap_plot. (micro_data + meta_data) |> EMP_cor_analysis() |> EMP_heatmap_plot(label_size=2,palette='Spectral', clust_row=TRUE,clust_col=TRUE) &#x1F3F7;️Example2： Analyse the interrelationships among microbiota. Note： ① In this example, using NULL here can create an EMP object with only one project. ② When the EMP object contains only one project, autocorrelation calculations will be performed. ③ To draw a co-occurrence network diagram of microbial communities, users can first use the parameter action='get' to obtain the correlation adjacency matrix, and then import it into specialized network analysis tools (such as Cytoscape, MENA, and Gephi) for further analysis. (micro_data + NULL) |> EMP_cor_analysis() |> EMP_heatmap_plot(label_size=1,palette='Spectral',clust_row=TRUE,clust_col=TRUE) 6.3.2 Investigate the correlation between differential functional genes of microbiota and differential host genes expression &#x1F3F7;️Example： Analysis of the correlation between differential functional genes of microbiota and differential host gene expression. Firstly, extract the assay of geno_ko from the MAE object. Utilize module EMP_identify_assay to filter sparse genes. Apply module EMP_diff_analysis for difference analysis using DESeq2 while accounting for batch issues caused by regional factors. And select KO genes with p-values lower than 0.05. ko_data EMP_assay_extract('geno_ko') |> EMP_identify_assay(method='edgeR') |> EMP_diff_analysis(method='DESeq2',.formula = ~Region+Group) |> EMP_filter(feature_condition = pvalue Secondly, extract the assay of host_gene from the MAE object. Utilize module EMP_identify_assay to filter sparse genes. Apply module EMP_diff_analysis for difference analysis using DESeq2 while accounting for batch issues caused by regional factors. And select genes with p-values lower than 0.05. host_gene EMP_assay_extract('host_gene') |> EMP_identify_assay(method='edgeR') |> EMP_diff_analysis(method='DESeq2',.formula = ~Region+Group) |> EMP_filter(feature_condition = pvalue Finally, use the + symbol to merge the ko_data and host_gene into an EMP object. Modules EMP_cor_analysis and EMP_heatmap_plot are utilized to perform correlation analysis and visualization. (ko_data + host_gene) |> EMP_cor_analysis() |> EMP_heatmap_plot() 6.3.3 Explore multiple correlations The module EMP_cor_analysis is capable of calculating the interrelationships between multi-omics project datasets. We can separately calculate the distinctive features between individual project datasets, use the + symbol to merge the projects and perform correlation tests in the order of combination. Module EMP_sankey_plot can draw a correlation Sankey diagram based on the results of multiple correlations. Note： ① In the correlation Sankey diagram, red indicates positive correlation and blue indicates negative correlation. ② The correlation Sankey diagram evaluates the relationships between each node, and isolated nodes will be filtered out. ③ The parameters pvalue and rvalue can adjust the number of edges. &#x1F3F7;️Example： Explore the multiple correlations between microbial, functional gene, metabolite, host gene, and sample-related data. micro_data EMP_assay_extract('taxonomy') |> EMP_identify_assay(method='default') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_decostand(method='relative') ko_data EMP_assay_extract('geno_ko') |> EMP_identify_assay(method='edgeR') |> EMP_diff_analysis(method='DESeq2',.formula = ~Region+Group) |> EMP_filter(feature_condition = pvalue EMP_assay_extract(experiment = 'untarget_metabol') |> EMP_collapse(estimate_group = 'MS2kegg',collapse_by='row', na_string = c(\"NA\", \"null\", \"\",\"-\"), method = 'mean',collapse_sep = '+') |> EMP_decostand(method = 'relative') |> EMP_dimension_analysis(method = 'pls',estimate_group = 'Group') |> EMP_filter(feature_condition = VIP >2) host_gene EMP_assay_extract('host_gene') |> EMP_identify_assay(method='edgeR') |> EMP_diff_analysis(method='DESeq2',.formula = ~Region+Group) |> EMP_filter(feature_condition = pvalue EMP_assay_extract('taxonomy') |> EMP_coldata_extract(action = 'add', coldata_to_assay = c('SAS','SDS','HAMA','HAMD','PHQ9','GAD7')) (micro_data + ko_data + metabolite_data + host_gene + meta_data) |> EMP_cor_analysis() |> EMP_sankey_plot() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:42:58 "},"MD/6.4 差异性分析 EMP_diff_analysis.html":{"url":"MD/6.4 差异性分析 EMP_diff_analysis.html","title":"6.4 EMP_diff_analysis","keywords":"","body":"6.4 EMP_diff_analysis The module EMP_diff_analysis supports difference analysis of experimental data under different grouping conditions, encompassing various statistical testing methods such as T-test, Wilcoxon test, one-way ANOVA test, Kruskal-Wallis test, DESeq2, edgeR, and limma. This module not only supports multi-core parallel computing to enhance efficiency, but also features a caching snapshot function (i.e., when the same parameters are used for calculation repeatedly, the system automatically retrieves the cached results without the need for re-computation). 6.4.1 Traditional Statistical Methods &#x1F3F7;️Example1：Perform difference analysis on core microbial data at the species level using a t-test, and apply Bonferroni multiple testing correction to the p-values. Note： ① In the case of two groups, sign_group displays the group where the feature's mean is higher than in the other group, but it does not involve statistical testing. In this example, for the feature column Alistipes, sign_Group is Group_B, indicating that the mean of Alistipes in Group_B is higher than in Group_A; combined with the pvalue column, the p-value of the T-test is 0.167, and the Bonferroni-corrected p-value is 1, indicating that the difference in the feature between groups is not statistically significant. ② In the case of more than two groups, sign_group shows the group with the highest mean for the feature among the involved groups, but it does not involve statistical testing. If the p-value in the pvalue column is less than 0.05, it indicates that the means of the involved groups are not all the same. To determine which specific groups have statistically significant differences in means, pairwise comparisons need to be performed. MAE |> EMP_assay_extract('taxonomy') |> EMP_identify_assay(method='default',estimate_group = 'Group') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_diff_analysis(method='t.test',estimate_group = 'Group',p.adjust = 'bonferroni') &#x1F3F7;️Example2：When grouping exceeds two groups, use oneway.test or kruskal.test for statistical testing. Note： ① If there are more than two groups or if the input data is not counts, relative, or integer, partial result such as fold_change and VSlog2FC will not be provided. ② The module EMP_diff_analysis inherits methods from the R built-in stats package, and additional parameters can be added within the module for adjustment. 6.4.2 DESeq2、edgeR and limma &#x1F3F7;️Example1：Using DESeq2 to conduct difference analysis of host gene datasets by sex. Note： When using these methods, the parameter estimate_group for specifying group information is no longer used, instead following the convention of the inherited package's syntax .formula. MAE |> EMP_assay_extract('host_gene') |> EMP_diff_analysis(method='DESeq2',.formula = ~Sex) &#x1F3F7;️Example2：Various methods using edgeR. MAE |> EMP_assay_extract('host_gene') |> EMP_diff_analysis(method='edgeR_quasi_likelihood',.formula = ~Sex) MAE |> EMP_assay_extract('host_gene') |> EMP_diff_analysis(method='edgeR_likelihood_ratio',.formula = ~Sex) &#x1F3F7;️Example3： More methods MAE |> EMP_assay_extract('host_gene') |> EMP_diff_analysis(method='edger_robust_likelihood_ratio',.formula = ~Sex) MAE |> EMP_assay_extract('host_gene') |> EMP_diff_analysis(method='limma_voom',.formula = ~Sex) MAE |> EMP_assay_extract('host_gene') |> EMP_diff_analysis(method='limma_voom_sample_weights',.formula = ~Sex) 6.4.3 Difference analysis results filtering and visualization The module EMP_filter can assist in quickly filtering and analyzing results. For detailed usage, refer to the help documentation of Module EMP_filter. MAE |> EMP_assay_extract('geno_ko') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_filter(feature_condition = pvalue 1.5 ) Draw the results of the difference analysis into a volcanic map. Note： Adding parameter show='html' to the function EMP_volcanol_plot provides interactive graphics, which helps in quickly identifying specific details of differential features. See section 8.10 EMP_volcanol_plot for more details. MAE |> EMP_decostand(experiment = 'geno_ec',method = 'integer') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_volcanol_plot(key_feature = c('3.6.1.62','1.5.3.19'), min.segment.length = 0, seed = 42, box.padding = 0.5) ## Add arrow Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:42:58 "},"MD/6.5 降维分析 EMP_dimension_analysis.html":{"url":"MD/6.5 降维分析 EMP_dimension_analysis.html","title":"6.5 EMP_dimension_analysis","keywords":"","body":"6.5 EMP_dimension_analysis The module EMP_dimension_analysis supports multidimensional data dimensionality reduction analysis, with dimensionality reduction methods including Principal Component Analysis (PCA), Principal Coordinates Analysis (PCoA), Partial Least Squares (PLS), and Orthogonal Partial Least Squares (OPLS). 6.5.1 Analysis and visualization of microbial beta diversity &#x1F3F7;️Example： Extract the assay of taxonomy from the MAE object. Utilize the module EMP_identify_assay to screen the core microbial data. Use the module EMP_collapse to collapse the core microbial data into genus-level. And perform a PCoA dimensionality reduction analysis with the module EMP_dimension_analysis. MAE |> EMP_assay_extract('taxonomy') |> EMP_identify_assay(method='default',estimate_group = 'Group') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_dimension_analysis(method = 'pcoa',distance='bray') The results of dimensionality reduction can be visualized using module EMP_scatterplot . Note： The parameter show supports the presentation of dimensionality reduction results from three dimensions: p12, p13, and p23, and provides an interactive HTML graphic. MAE |> EMP_assay_extract('taxonomy') |> EMP_identify_assay(method='default',estimate_group = 'Group') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_dimension_analysis(method = 'pcoa',distance='bray') |> EMP_scatterplot(estimate_group='Group',show='p12html',ellipse=0.3) 6.5.2 Metabolomics data PLS dimensionality reduction analysis and feature metabolites screening &#x1F3F7;️Example： Extract the assay of untarget_metabol from the MAE object, collapse the data according to secondary metabolites annotated with KEGG, perform relative abundance transformation, conduct PLS dimensionality reduction analysis, obtain the reduced dimension coordinates and VIP values of the metabolites, and filter the characteristic metabolites based on the VIP values. MAE |> EMP_assay_extract(experiment = 'untarget_metabol') |> EMP_collapse(estimate_group = 'MS2kegg',collapse_by='row', na_string = c(\"NA\", \"null\", \"\",\"-\"), method = 'mean',collapse_sep = '+') |> EMP_decostand(method = 'relative') |> EMP_dimension_analysis(method = 'pls',estimate_group = 'Group') |> EMP_filter(feature_condition = VIP >2) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-12 21:23:14 "},"MD/6.6 富集分析 EMP_enrich_analysis.html":{"url":"MD/6.6 富集分析 EMP_enrich_analysis.html","title":"6.6 EMP_enrich_analysis","keywords":"","body":"6.6 EMP_enrich_analysis KEGG (Kyoto Encyclopedia of Genes and Genomes) enrichment analysis is a bioinformatics approach used to determine if a set of genes or proteins is significantly enriched in specific biological pathways or functions. The KEGG database contains extensive functional information about genes and their products, as well as the roles of these genes in metabolic pathways, signaling pathways, and disease pathways. This module allows for the online reading of KEGG database information, completing the standard steps of enrichment analysis. 6.6.1 KEGG enrichment analysis based on KO/EC annotations During the analysis of metagenomic microbial data, the functional gene annotation results of KO/EC can be obtained. Module EMP_diff_analysis can be used to retrieve differential genes, and module EMP_enrich_analysis can be utilized for KEGG enrichment analysis. Note: ① The parameter KEGG_Type can specify enrichment by pathway (KEGG_Type = 'KEGG') or by module (KEGG_Type = 'MKEGG'). ② The parameter species defaults to using all species data as background genes (species = 'all'). Users can also specify data from a specific species as background genes for enrichment. ③ The parameter condition filters differential genes based on p-value or corrected p-value, and performs enrichment. &#x1F3F7;️Example1： MAE |> EMP_assay_extract(experiment = 'geno_ec') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_enrich_analysis(condition = pvalue &#x1F3F7;️Example2：Modules EMP_dotplot and EMP_netplot inherit dotplot and cnetplot from enrichplot package, allowing for the visualization of the results from the enrichment analysis. MAE |> EMP_assay_extract(experiment = 'geno_ec') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_enrich_analysis(condition = pvalue EMP_dotplot() MAE |> EMP_assay_extract(experiment = 'geno_ec') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_enrich_analysis(condition = pvalue EMP_netplot() 6.6.2 KEGG Enrichment Analysis Based on Gene Name This type of data is commonly found in the bulk transcriptome data of the host organism. Before analysis, it is necessary to use module EMP_feature_convert to convert gene symbols into entrezid. &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment = 'host_gene') |> EMP_feature_convert(from = 'symbol',to='entrezid',species='Human') |> EMP_diff_analysis(method = 'DESeq2', .formula = ~Group,p.adjust = 'fdr') |> EMP_enrich_analysis(keyType ='entrezid', KEGG_Type ='KEGG',pvalue 6.6.3 KEGG enrichment analysis based on metabolites This type of data is mainly generated by metabolomics, and before enrichment analysis, the feature names need to be converted into compound ID. &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment = 'untarget_metabol')|> EMP_collapse(na_string=c('NA','null','','-'), estimate_group = 'MS2kegg',method = 'sum',collapse_by = 'row') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_enrich_analysis(keyType ='cpd', KEGG_Type ='KEGG',pvalue Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 00:39:23 "},"MD/6.7 标志物分析 EMP_marker_analysis.html":{"url":"MD/6.7 标志物分析 EMP_marker_analysis.html","title":"6.7 EMP_marker_analysis","keywords":"","body":"6.7 EMP_marker_analysis The module EMP_marker_analysis is designed to utilize machine learning algorithms to identify signature features within multi-omics data. It is important to note that in omics data analysis, machine learning models primarily serve two purposes: the first is to use machine learning algorithms to filter out features with potential marker capabilities; the second is to construct machine learning predictive models based on omics data, to assist in distinguishing between different groups. Since building predictive models often requires multiple parameter tuning optimizations, using default parameters can often lead to unsatisfactory results. Therefore, the design of module EMP_marker_analysis aims to assist users in quickly screening potential markers, rather than focusing on building and optimizing predictive models. 6.7.1 Estimate the importance of features based on the Boruta algorithm &#x1F3F7;️Example： The Boruta algorithm can be used to quickly categorize the features in the data into three categories, Confirmed , Tentative , and Rejected , based on the classification in coldata. MAE |> EMP_marker_analysis(experiment = 'geno_ec',method = 'boruta', estimate_group = 'Group') The EMP_filter module can be used to quickly filter the required features, making it convenient for downstream analysis. Note： The module EMP_filter is applicable to screen for all models。 MAE |> EMP_marker_analysis(experiment = 'geno_ec',method = 'boruta', estimate_group = 'Group') |> EMP_filter(feature_condition = Boruta_decision != 'Rejected') 6.7.2 Estimate the importance of features based on the Random Forest Algorithm &#x1F3F7;️Example1：Assessing feature importance based on random forest classification. MAE |> EMP_marker_analysis(experiment = 'geno_ec',method = 'randomforest', estimate_group = 'Group') &#x1F3F7;️Example2：Assessing feature importance based on random forest regression. MAE |> EMP_marker_analysis(experiment = 'geno_ec',method = 'randomforest', estimate_group = 'BMI') 6.7.3 Estimate the importance of features based on the xgboost algorithm Note: ① When using the xgboost algorithm, the model must be specified through the parameter objective. If the value specified by the parameter estimate_group is a binary classification variable, the parameter should be set as objective = 'binary:logistic'; if the value specified by estimate_group is a multi-class classification variable, it should be set as objective = 'multi:softmax'; if the value specified by estimate_group is a continuous variable, the parameter should be set as objective = 'reg:squarederror'. More details are available in the xgboost package. ② For classification models, the parameter xgboost_run='classify' must be specified. ③ For regression models, the parameter xgboost_run='regress' must be specified. ④ An incorrect specification of the parameter xgboost_run will result in incorrect outcomes. &#x1F3F7;️Example1：基于xgboost分类算法进行特征重要性评估。 MAE |> EMP_marker_analysis(experiment = 'geno_ec',method = 'xgboost',xgboost_run='classify', estimate_group = 'Group',objective = 'binary:logistic') &#x1F3F7;️Example2：基于xgboost回归算法进行特征的重要性评估。 MAE |> EMP_marker_analysis(experiment = 'geno_ec',method = 'xgboost',xgboost_run='regression', estimate_group = 'BMI',objective = 'reg:squarederror') 6.7.4 基于Lasso算法估计特征的重要性 &#x1F3F7;️Example： MAE |> EMP_marker_analysis(experiment = 'geno_ec',method = 'lasso', estimate_group = 'BMI') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 14:58:37 "},"MD/6.8 GSEA富集分析 EMP_GSEA_analysis.html":{"url":"MD/6.8 GSEA富集分析 EMP_GSEA_analysis.html","title":"6.8 EMP_GSEA_analysis","keywords":"","body":"6.8 EMP_GSEA_analysis Gene Set Enrichment Analysis (GSEA) involves comparing genes from a gene set of interest to genes in predefined gene sets (often derived from functional annotations or previous experiments). The genes of interest are ranked by a calculated score, creating a ranked list. GSEA then assesses whether the genes in the predefined gene sets are randomly distributed or tend to cluster at the top or bottom of this list. Clustering at the extremes indicates that the predefined gene sets contribute to the observed phenotype differences. GSEA ranking methods include those based on signal-to-noise ratios, correlation results, and difference analysis results. 6.8.1 Sorting by signal2Noise The signal2Noise value is a calculation provided on the official website of GSEA for sequencing genes to be analyzed. &#x1F3F7;️Example： MAE |> EMP_GSEA_analysis(experiment = 'geno_ko',method='signal2Noise', estimate_group = 'Group', pvalueCutoff = 0.05,keyType = 'ko') 6.8.2 Sorting by relevance In the process, it can be filtered by specifying the parameter threshold_r (absolute value threshold of the correlation coefficient) and threshold_p (p-value threshold). Specifically, if the absolute value of the correlation coefficient between a gene to be analyzed and the trait in the coldata is below the specified threshold, or if its p-value is bigger than the specified threshold, the gene will be removed from the ranking table. &#x1F3F7;️Example： MAE |> EMP_GSEA_analysis(experiment = 'geno_ko',method='cor', estimate_group = 'BMI',cor_method = 'spearman', threshold_r = 0.3,threshold_p = 0.05, ###### filter by coe and pvalue pvalueCutoff = 0.05,keyType = 'ko',KEGG_Type = 'KEGG') 6.8.3 Sorting by log2FC Note：①The analysis process must be performed after the function EMP_diff_analysis ②It is necessary to distinguish the parameter pvalue and pvalueCutoff in the module EMP_GSEA_analysis, the former corresponds to the pvalue in the analysis results of the module EMP_diff_analysis, and the latter corresponds to the corrected p-value in the analysis results of the module EMP_GSEA_analysis (e.g. fdr, bonferroni, etc.). &#x1F3F7;️Example： MAE |> EMP_diff_analysis(experiment = 'geno_ec',method='DESeq2',.formula = ~0+Group, group_level=c('Group_A','Group_B')) |> EMP_GSEA_analysis(method='log2FC',pvalue 6.8.4 Visualization of GSEA result &#x1F3F7;️Example： MAE |> EMP_GSEA_analysis(experiment = 'geno_ko',method='signal2Noise', estimate_group = 'Group', pvalueCutoff = 0.05,keyType = 'ko') |> EMP_curveplot(geneSetID='map00680') MAE |> EMP_GSEA_analysis(experiment = 'geno_ko',method='signal2Noise', estimate_group = 'Group', pvalueCutoff = 0.05,keyType = 'ko') |> EMP_dotplot() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:42:58 "},"MD/6.9 EMP_WGCNA_cluster_analysis.html":{"url":"MD/6.9 EMP_WGCNA_cluster_analysis.html","title":"6.9 EMP_WGCNA_cluster_analysis","keywords":"","body":"6.9 EMP_WGCNA_cluster_analysis Weighted correlation network analysis (WGCNA) aims to discover co-expressed gene modules, explore the association between gene networks and phenotypes of interest, and find the core genes in the network. 6.9.1 WGCNA Clustering Module This module integrates the relevant modules of the WGCNA package, which can quickly complete clustering based on the WCGNA algorithm. &#x1F3F7;️Example： MAE |> EMP_assay_extract('geno_ec') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85) Note： The parameter EMP_WGCNA_cluster_analysis inherits the usage of the function WGCNA_blockwiseModules from WGCNA package, and help adjust the clustering effect. ```R MAE |> EMP_assay_extract('geno_ec') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85,mergeCutHeight=0.4) ``` 6.9.2 Filtering the WGCNA clustering result The WGCNA cluster analysis results can be filtered using the module EMP_filter. This process has been widely used in subsequent enrichment analysis. &#x1F3F7;️Example： MAE |> EMP_assay_extract('geno_ec') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85,mergeCutHeight=0.4) |> EMP_filter(feature_condition = WGCNA_color=='green') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:39:46 "},"MD/6.10 EMP_WGCNA_cor_analysis.html":{"url":"MD/6.10 EMP_WGCNA_cor_analysis.html","title":"6.10 EMP_WGCNA_cor_analysis","keywords":"","body":"6.10 EMP_WGCNA_cor_analysis After the WGCNA clustering analysis, the module EMP_WGCNA_cor_analysis used the PCA method to reduce the dimensionality of the clustering module, and the axis with the most explanatory degree was associated with the target data, to explore which clustering data have potential follow-up analysis value. 6.10.1 WGCNA analysis within single omics data &#x1F3F7;️Example 1： The assay from experiment geno_ec was extracted from the MAE object firstly. Then the core genes were screened by the edgeR method, and subsequently the cluster analysis was performed by WGCNA and the correlation analysis of the sample related data. Finally, the results were visualized by drawing heatmap. MAE |> EMP_assay_extract('geno_ec') |> EMP_identify_assay(method = 'edgeR',estimate_group = 'Group') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85,mergeCutHeight=0.4) |> EMP_WGCNA_cor_analysis(coldata_to_assay = c('BMI','PHQ9','GAD7','HAMD','SAS','SDS'), method='spearman') |> EMP_heatmap_plot() &#x1F3F7;️Example 2： After WGCNA cluster analysis and correlation analysis, the module with a statistically significant correlation with the relevant data of the target sample can be selected for downstream differentiation and enrichment analysis. MAE |> EMP_assay_extract('geno_ec') |> EMP_identify_assay(method = 'edgeR',estimate_group = 'Group') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85,mergeCutHeight=0.4) |> EMP_WGCNA_cor_analysis(coldata_to_assay = c('BMI','PHQ9','GAD7','HAMD','SAS','SDS'), method='spearman') |> EMP_filter(feature_condition = WGCNA_color=='black') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) |> EMP_enrich_analysis(keyType = 'ec',KEGG_Type = 'MKEGG') |> EMP_dotplot() 6.10.2 WGCNA analysis within multi-omics data &#x1F3F7;️Example： Firstly, the assays from experiment geno_ec were extracted from the MAE object. Then, the core genes screened by the edgeR method were clustered subsequently. Secondly, the genes of interest in the experiment host_gene were extracted from the MAE object (or the target gene was selected using methods such as difference analysis). The two omics were connected using the + sign and WGCNA correlation analysis was performed. Note： In this process, the WGCNA clustering result is extracted from the first omics for WGCNA correlation analysis with the second omics by default, so pay attention to the order of using + merging omics. k1 EMP_assay_extract('geno_ec') |> EMP_identify_assay(method = 'edgeR',estimate_group = 'Group') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85,mergeCutHeight=0.4) k2 EMP_assay_extract('host_gene',pattern = c('A1BG','A1CF','A2MP1','AACS'), pattern_ref = 'feature') (k1 + k2) |> EMP_WGCNA_cor_analysis(method='spearman') |> EMP_heatmap_plot(palette = 'Spectral') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:42:58 "},"MD/6.11 联合分析 EMP_multi_analysis.html":{"url":"MD/6.11 联合分析 EMP_multi_analysis.html","title":"6.11 EMP_multi_analysis","keywords":"","body":"6.11 EMP_multi_analysis The module EMP_multi_analysis is designed to integrate multiple statistically significant p-values into a single integrated p-value by statistical analysis. Specify the method of joint analysis with the parameters method, including feature, diff_feature_enrich, and same_feature_enrich. 6.11.1 Fusion of statistical results of the same feature from different study cohorts Different study cohorts are often designed for similar study objective, while some features in these results may be inconsistent, which is especially prevalent in microbial data analysis. To address this, the combining dependent P-values method can integrate multiple statistical results into a single composite result. &#x1F3F7;️Example： Microbial data from the two regions were extracted from the MAE object, and difference analysis was performed. k1 EMP_assay_extract('taxonomy') |> EMP_filter(Region == 'Paris') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) k2 EMP_assay_extract('taxonomy') |> EMP_filter(Region == 'Guangzhou') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) The p-value fusion method was used to fuse the p-value results of the two differential analyses. 注意： ①The parameter combineMethod provides three methods to fuse P: fisher, edgington and stouffer. ②The parameter action='get' can extract the result of difference analysis. (k1+k2) |> EMP_multi_analysis(method = 'feature',combineMethod='edgington', p.adjust = 'BH') 6.11.2 Fusion of statistical results of the same feature from different study cohorts &#x1F3F7;️Example： KO data from the two regions were performed difference analysis and KEGG enrichment. k1 EMP_assay_extract('geno_ko') |> EMP_filter(Region == 'Paris') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) |> EMP_enrich_analysis(pvalue EMP_assay_extract('geno_ko') |> EMP_filter(Region == 'Guangzhou') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) |> EMP_enrich_analysis(pvalue For the enrichment with the same features, this function provides three methods to combine them: enchier, ActivePathways, and mitch。 Note：①When the enchier method is activated, the combine process is performed by P fusion. By adjusting the parameter combineMethod , it is possible to determine whether the fusion p-value occurs at the feature level or at the enrichment analysis result level.②The ActivePathways and mitch algorithms rely on their published packages. (k1+k2) |> EMP_multi_analysis(method = 'same_feature_enrich', keyType = 'ko',combineFun='ActivePathways')|> EMP_dotplot() --> 6.11.3 Fusion of enrichment results of the different features from the same study cohort Sequencing analyses of functional genes and metabolomics are occasionally conducted simultaneously within the same cohort, leading to two sets of KEGG enrichment assays that may not always be identical. In such cases, using a Venn diagram alone to identify intersections may not effectively reveal the enrichment relationships between the different omics. To address this issue, this module employs algorithms to integrate KEGG enrichment results across different features in the distinct omics datasets. &#x1F3F7;️Example： KO annotation result and metabolomics result were extracted from MAE objects, and KEGG enrichment analysis was completed separately. k1 EMP_assay_extract('geno_ko') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) |> EMP_enrich_analysis(pvalue EMP_collapse(experiment = 'untarget_metabol',na_string=c('NA','null','','-'), estimate_group = 'MS2kegg',method = 'sum',collapse_by = 'row') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) |> EMP_enrich_analysis(pvalue Use the + sign to combine omics for enrichment analysis. (k1+k2) |> EMP_multi_analysis(method = 'diff_feature_enrich') |> EMP_dotplot() --> Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 18:58:42 "},"MD/7 data support.html":{"url":"MD/7 data support.html","title":"Chapter 7 Data support","keywords":"","body":"7. EMP_support Welcome to this tutorial, which is designed to introduce you to the tools and methods commonly used in data analysis with EasyMultiProfiler. Throughout this tutorial, you'll learn how to use various functional modules to import, filter, extract, and review your data. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 15:03:23 "},"MD/7.1 数据筛选 data_filter.html":{"url":"MD/7.1 数据筛选 data_filter.html","title":"7.1 EMP_filter","keywords":"","body":"7.1 EMP_filter The function of module EMP_filter is very powerful, which can not only filter features and samples according to rowdata and coldata but also filter them according to data analysis results. To facilitate the user's understanding, the following describes the basic parameters of the module EMP_filter: obj: Specify the object to be analyzed, either MAE or EMPT. experiment: Specify the name of the project to be analyzed (character). sample_condition: Specify the threshold conditions for selecting samples. feature_condition: Specify the threshold conditions for selecting features. filterSample: Specify the names of the samples to be filtered. filterFeature: Specify the names of the features to be filtered. action: Used in conjunction with parameters filterSample and filterFeature, set to kick or select. show_info: Specify the display method of the output results. Note: ① It is necessary to understand the filtering logic in the module EMP_filter. First, samples and features are filtered based on the conditions specified by the parameters sample_condition and feature_condition. Then, samples and features are selected or kicked based on the parameters filterSample and filterFeature. ② If EMP_filter operation does not meet the filtering requirements in once time, the EMP_filter process can be performed multiple times. 7.1.1 Filter the data across all the experiments in MAE &#x1F3F7;️Example 1：Screen male subjects older than 30 years from all omics projects. MAE |> EMP_filter(sample_condition = Sex == 'M' & Age >30) After filtering, only the samples that meet the conditions that exist in the MAE object, and other analysis modules can be directly used for downstream analysis. For example, users can use the module EMP_coldata_extract to observe the filtered sample. MAE |> EMP_filter(sample_condition = Sex == 'M' & Age >30) |> EMP_coldata_extract() &#x1F3F7;️Example 2：Select the samples without missing values in the sample-related data. Note： The module EMP_filter inherits the filter syntax from the dplyr package, so the tidy syntax for filtering is avaviable. MAE |> EMP_filter(sample_condition = if_all(everything(),~ !is.na(.))) &#x1F3F7;️Example 3：Select the samples whose at least one of the PHQ-9 or GAD-7 scores is greater than 5. MAE |> EMP_filter(sample_condition = if_any(c(PHQ9,GAD7),~. > 5)) 7.1.2 Filter samples and features in single omics data &#x1F3F7;️Example 1：Filter samples based on raw data. Select male samples over the age of 30 from the data and exclude the sample P70597. Note： The parameter action is used only for the parameters filterSample and filterFeature. MAE |> EMP_assay_extract('host_gene') |> EMP_filter(Sex == 'M' & Age >30,filterSample = 'P70597',action = 'kick') &#x1F3F7;️Example 2：Filter samples based on previous alpha analysis result. Select samples with the Shannon value greater than 2. MAE |> EMP_assay_extract('taxonomy') |> EMP_alpha_analysis() |> EMP_filter(shannon > 2) &#x1F3F7;️Example 3：Filter samples based on previous difference analysis result. Select feature with the adjust P value less than 0.05. MAE |> EMP_assay_extract('host_gene') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group,p.adjust = 'BH') |> EMP_filter(feature_condition = BH &#x1F3F7;️Example 4： Filter samples and features in multiple conditions and times. Extract the assay of geno_ec. Perform WGCNA analysis followed by DESeq2 difference analysis, and then filter the data based on the following criteria: Samples older than 30 years; Core genes identified by edgeR; Genes from the WGCNA analysis that are associated significantly with BMI; Genes with a p-value less than 0.05 in the difference analysis. MAE |> EMP_assay_extract('geno_ec') |> EMP_identify_assay(method = 'edgeR',estimate_group = 'Group') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85,mergeCutHeight=0.4) |> EMP_WGCNA_cor_analysis(coldata_to_assay = c('BMI','PHQ9','GAD7','HAMD','SAS','SDS'), method='spearman') |> EMP_heatmap_plot() |> # This step can help find the interesting module EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) |> EMP_filter(sample_condition = Age >30, feature_condition = WGCNA_color == 'black' & pvalue 7.1.3 Regarding the removal of data analysis results after filtering In the analysis workflow in the EasyMultiProfiler package, the analysis results are automatically stored in objects for the module EMP_filter. However, once the screening is complete, the previously stored results may no longer be right and are therefore automatically cleared away (e.g., the results of the difference analysis and alpha diversity analysis are stored in the container, and then some samples are excluded based on the BMI value). At this stage, the existing difference analysis results are automatically cleared because they are no longer right; The alpha diversity results are not affected by the sample change and will continue to be stored in the object for the next screening). The EasyMultiProfiler package already automates this process and will alert the user in red text that the action has been performed. 7.1.4 Regarding the display of filtered data In the analysis workflow of the EasyMultiProfiler package, after filtering with the module EMP_filter, the output will by default retain the display results from the previous analysis module. For example, if the previous module performed alpha diversity calculations, and EMP_filter is used to filter based on the Age>30 condition, the EMP_filter output will continue to display the filtered results from the previous module. If the result is cleared due to changes in samples or features (as detailed in section 7.1.3), the output will instead reflect the current state of the dataset assay. 7.1.5 Regarding filtered Data Extraction In the module EMP_filter, the parameter action is used only to filter with parameters filterSample and filterFeature. If users want to extract the assay data after filtering, it is a good idea to use the module EMP_assay_extract after the module EMP_filter. &#x1F3F7;️Example：Extract assay after filtering. MAE |> EMP_assay_extract('host_gene') |> EMP_filter(Sex == 'M' & Age >30,filterSample = 'P70597',action = 'kick') |> EMP_assay_extract(action = 'get') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 18:58:42 "},"MD/7.2 数据历史 EMP_history.html":{"url":"MD/7.2 数据历史 EMP_history.html","title":"7.2 EMP_history","keywords":"","body":"7.3 EMP_history The module EMP_history can extract the historical processing records of any result in the EasyMultiProfiler analysis process, which is convenient for users to trace the completed data analysis process. 7.3.1 Trace the history of data analysis of single-omic project k1 EMP_assay_extract('geno_ko') |> EMP_filter(Region == 'Paris') |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) |> EMP_enrich_analysis(pvalue EMP_history() 7.3.2 Trace the history of data analysis of multi-omics projects k1 EMP_assay_extract('taxonomy') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_diff_analysis(method='DESeq2', .formula = ~Group) |> EMP_filter(feature_condition = pvalue EMP_collapse(experiment = 'untarget_metabol',na_string=c('NA','null','','-'), estimate_group = 'MS2kegg',method = 'sum',collapse_by = 'row') |> EMP_diff_analysis(method='DESeq2', .formula = ~Group) |> EMP_filter(feature_condition = pvalue 1.5) k3 EMP_assay_extract('geno_ec') |> EMP_diff_analysis(method='DESeq2', .formula = ~Group) |> EMP_filter(feature_condition = pvalue 2) #For two experinemnts p1 EMP_cor_analysis(method = 'spearman') |> EMP_heatmap_plot() ## Visualization p1 |> EMP_history() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:53:31 "},"MD/7.3 数据结果提取和注入 EMP_result.html":{"url":"MD/7.3 数据结果提取和注入 EMP_result.html","title":"7.3 EMP_result","keywords":"","body":"7.3 EMP_result The module EMP_result can extract the data analysis results in the analysis workflow, and can import the external data analysis results that meet the format requirements into the objects and combine them for data analysis. 7.3.1 Extraction of data analysis results When multiple data analyses are performed in the workflow, the results are stored in the object. The module EMP_result can quickly extract the original results. result EMP_assay_extract('geno_ec') |> EMP_alpha_analysis() |> EMP_diff_analysis(method = 'DESeq2',.formula = ~Group) |> EMP_enrich_analysis(pvalue EMP_result(info = 'EMP_diff_analysis') alpha_re EMP_result(info = 'EMP_alpha_analysis') enrich_re EMP_result(info = 'EMP_enrich_analysis') 7.3.2 Injection of data analysis results It is challenging to include all data analysis and processing methods within a single R package. Therefore, the module EMP_result allows importing results from external software analyses into the EMPT object, enabling integration with the analysis results in EasyMultiProfiler for more comprehensive joint analysis. &#x1F3F7;️Example：Users can import the results from the external vegan package to calculate diversity into the EMPT object. Step 1: Extract the species data of the microorganisms. tax_se EMP_assay_extract('taxonomy') assay_data EMP_assay_extract(action = 'get') Step 2: The Shannon diversity index was calculated using the vegan package and named new_shannon. assay_data tibble::column_to_rownames('primary') shannon_index Note： The name in the new result must be unique and not duplicate any existing names in the data results; otherwise, the function EMP_filter will not work correctly. For example, in this case, you need to rename the Shannon index from an external result to new_shannon to avoid conflicts with the result name from EMP_alpha_analysis. ### inject the new result into EMPT object EMP_result(tax_se, value_name = 'new_alpha', affect_when_sample_changed=0, affect_when_feature_changed=1, attribute='primary', attribute2='normal',source='user_import') EMP_filter(sample_condition = new_shannon >4) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-09-07 22:41:28 "},"MD/7.4 数据概览 EMP_summary.html":{"url":"MD/7.4 数据概览 EMP_summary.html","title":"7.4 EMP_summary","keywords":"","body":"7.4 EMP_summary The module EMP_summary provides a quick overview of MAE and EMP objects. The visualization is divided into the following three sections: Data dimension： Sample refers to the number of samples of experimental data in the current omics project, and Feature refers to the number of features in the current omics project. Data information: Sample_attr refers to the number of classifications of sample-related data in the current omics project, and Feature_atrr refers to the number of classifications of feature-related data in the current omics project. For example, the Feature_atrr is 8 in the experiment taxonomy, which means that the feature annotation includes 8 levels of Kindom, Phylum, Class, Order, Family, Genus, Species, and Strain. Data miss: Assay_status, Sample_status, and Feature_status indicate whether there are missing values in the experimental data, sample-related data, and feature-related data of the current omics project, respectively. 7.4.1 Visualization of MAE Object data(MAE) MAE |> EMP_summary() 7.4.2 Overview Visualization of EMP Object k1 EMP_assay_extract('taxonomy') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_diff_analysis(method='DESeq2', .formula = ~Group) |> EMP_filter(feature_condition = pvalue EMP_collapse(experiment = 'untarget_metabol',na_string=c('NA','null','','-'), estimate_group = 'MS2kegg',method = 'sum',collapse_by = 'row') |> EMP_diff_analysis(method='DESeq2', .formula = ~Group) |> EMP_filter(feature_condition = pvalue 1.5) (k1 + k2) |> EMP_summary() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 18:42:04 "},"MD/7.5 物种数据导入 EMP_taxonomy_import.html":{"url":"MD/7.5 物种数据导入 EMP_taxonomy_import.html","title":"7.5 EMP_taxonomy_import","keywords":"","body":"7.5 EMP_taxonomy_import Detailed in Section 2.1.3. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 01:32:20 "},"MD/7.6 功能数据导入 EMP_function_import.html":{"url":"MD/7.6 功能数据导入 EMP_function_import.html","title":"7.6 EMP_function_import","keywords":"","body":"7.6 EMP_function_import Detailed in Section 2.1.4. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 01:32:35 "},"MD/7.7 标准数据导入 EMP_normal_import.html":{"url":"MD/7.7 标准数据导入 EMP_normal_import.html","title":"7.7 EMP_normal_import","keywords":"","body":"7.7 EMP_normal_import Detailed in Section 2.1.5. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 01:32:45 "},"MD/7.8 快捷数据导入 EMP_easy_import.html":{"url":"MD/7.8 快捷数据导入 EMP_easy_import.html","title":"7.8 EMP_easy_import","keywords":"","body":"7.8 EMP_easy_import Detailed in Section 2.2. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 01:37:53 "},"MD/8 data virtualization.html":{"url":"MD/8 data virtualization.html","title":"Chapter 8 Data Virtualization","keywords":"","body":"8. Data Virtualization Welcome to this tutorial, which offers a thorough technical guide to data visualization. Here, you'll learn how to utilize various charts to analyze and present the results from EasyMultiProfiler data analysis. Whether you're dealing with basic charts, enrichment analysis charts, biotech data distributions, or relationships, this tutorial provides clear guidance and practical tips to help you visualize your data more effectively. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 18:42:23 "},"MD/8.1 箱型图 EMP_boxplot.html":{"url":"MD/8.1 箱型图 EMP_boxplot.html","title":"8.1 EMP_boxplot","keywords":"","body":"8.1 EMP_boxplot Box plots are statistical charts used to show the distribution of data. Note： ①The module EMP_boxplot is mainly used for the rapid visualization of the results of difference analysis but not the paired test, one-way ANOVA, or Kruskal-wails test. ②A more comprehensive difference analysis can be performed using the module EMP_diff_analysis. 8.1.1 Box plots for assay data &#x1F3F7;️Example： MAE |> EMP_assay_extract('host_gene',pattern = 'A1BG',pattern_ref = 'feature') |> EMP_boxplot(method='t.test',estimate_group='Group') 8.1.2 Box plots for alpha analysis result &#x1F3F7;️Example： MAE |> EMP_assay_extract('taxonomy') |> EMP_alpha_analysis()|> EMP_boxplot(method='t.test',estimate_group='Group') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 18:51:33 "},"MD/8.2 散点图 EMP_scatterplot.html":{"url":"MD/8.2 散点图 EMP_scatterplot.html","title":"8.2 EMP_scatterplot","keywords":"","body":"8.2 EMP_scatterplot A scatter plot is a plot that uses points on a Cartesian coordinate system to represent how two or more variables are distributed. 8.2.1 Scatterplot for reduced dimension result Note： Specify the parameter show to observe the dimensionality reduction results from the three dimensions of p12, p13, and p23, and provide an interactive html. &#x1F3F7;️Example： MAE |> EMP_assay_extract('taxonomy') |> EMP_identify_assay(method='default',estimate_group = 'Group') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_dimension_analysis(method = 'pcoa',distance='bray') |> EMP_scatterplot(estimate_group='Group',show='p12html',ellipse=0.3) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 14:59:07 "},"MD/8.3 富集点状图 EMP_dotplot.html":{"url":"MD/8.3 富集点状图 EMP_dotplot.html","title":"8.3 EMP_dotplot","keywords":"","body":"8.3 EMP_dotplot The module EMP_dotplot is designed for the enrichment result. 8.3.1 Dotplot of KEGG enrichment result The module EMP_dotplot inherits the dotplot from the enrichplot package, which can visualize the results of enrichment analysis. &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment = 'geno_ec') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_enrich_analysis(condition = pvalue EMP_dotplot() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:31:23 "},"MD/8.4 富集网络图 EMP_netplot.html":{"url":"MD/8.4 富集网络图 EMP_netplot.html","title":"8.4 EMP_netplot","keywords":"","body":"8.4 EMP_netplot The module EMP_netplot is designed for the enrichment result. 8.4.1 Netplot of KEGG enrichment result The module EMP_netplot inherits the cnetplot from the enrichplot package, which can visualize the results of enrichment analysis. &#x1F3F7;️Example： MAE |> EMP_assay_extract(experiment = 'geno_ec') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_enrich_analysis(condition = pvalue EMP_netplot() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:31:23 "},"MD/8.5 双变量拟合图 EMP_fitline_plot.html":{"url":"MD/8.5 双变量拟合图 EMP_fitline_plot.html","title":"8.5 EMP_fitline_plot","keywords":"","body":"8.5 EMP_fitline_plot The module EMP_fitline_plot can plot the fitting line. 8.5.1 For single-omic data Note： ①Parameter show can provide interactivate html document. ②Parameter estimate_group can divide data according to the coldata. ③Parameter formula can adjust the formula. &#x1F3F7;️Example： ## For EMPT MAE |> EMP_assay_extract('geno_ec') |> EMP_fitline_plot(var_select=c('1.1.1.1','BMI'),formula = y ~ poly(x, 1)) MAE |> EMP_assay_extract('geno_ec') |> EMP_fitline_plot(var_select=c('Weight','BMI'),estimate_group='Sex',show='pic') 8.5.2 For multi-omics data &#x1F3F7;️Example： ## For EMP k1 EMP_assay_extract('geno_ec') |> EMP_decostand(method = 'clr') k2 EMP_assay_extract('taxonomy') |> EMP_collapse(collapse_by='row',estimate_group = 'Class',method = 'sum') |> EMP_decostand(method = 'relative') (k1 + k2) |> EMP_fitline_plot(var_select=c('1.1.1.1','Bacilli'), estimate_group='Group',eq_size=2.5) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 19:00:24 "},"MD/8.6 富集曲线图 EMP_curveplot.html":{"url":"MD/8.6 富集曲线图 EMP_curveplot.html","title":"8.6 EMP_curveplot","keywords":"","body":"8.6 EMP_curveplot The module EMP_curveplot is designed for the GSEA result. &#x1F3F7;️Example： MAE |> EMP_GSEA_analysis(experiment = 'geno_ko',method='signal2Noise', estimate_group = 'Group', pvalueCutoff = 0.05,keyType = 'ko') |> EMP_curveplot(geneSetID='map00680') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-30 16:31:23 "},"MD/8.7 热图 EMP_heatmap_plot.html":{"url":"MD/8.7 热图 EMP_heatmap_plot.html","title":"8.7EMP_heatmap_plot","keywords":"","body":"8.7 EMP_heatmap_plot Heatmaps are used to visualize data matrices by representing values through color gradients, providing a clear view of patterns and relationships within datasets, which is widely applied in fields like bioinformatics, data analysis, and statistics. 8.3.1 Heatmap for assay Note： ①Before plotting the heatmap, the user can use the module EMP_decostand for normalization to achieve the best visual enhancement. ②Pamameter palette can specify the color. &#x1F3F7;️Example： MAE |> EMP_assay_extract('geno_ec') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_filter(feature_condition = pvalue3.5) |> EMP_decostand(method = 'clr') |> EMP_heatmap_plot(clust_row=TRUE,clust_col=TRUE,rotate=TRUE) 8.3.2 Heatmap for correlation analysis &#x1F3F7;️Example： micro_data EMP_assay_extract('taxonomy') |> EMP_identify_assay(method='default') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_decostand(method='relative') meta_data EMP_assay_extract('taxonomy') |> EMP_coldata_extract(action = 'add', coldata_to_assay = c('SAS','SDS','HAMA','HAMD','PHQ9','GAD7')) (micro_data + meta_data) |> EMP_cor_analysis() |> EMP_heatmap_plot(label_size=2,palette='Spectral', clust_row=TRUE,clust_col=TRUE) 8.3.3 Heatmap for WGCNA &#x1F3F7;️Example： MAE |> EMP_assay_extract('geno_ec') |> EMP_identify_assay(method = 'edgeR',estimate_group = 'Group') |> EMP_WGCNA_cluster_analysis(RsquaredCut = 0.85,mergeCutHeight=0.4) |> EMP_WGCNA_cor_analysis(coldata_to_assay = c('BMI','PHQ9','GAD7','HAMD','SAS','SDS'), method='spearman') |> EMP_heatmap_plot() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 19:57:55 "},"MD/8.8 桑基图 EMP_sankey_plot.html":{"url":"MD/8.8 桑基图 EMP_sankey_plot.html","title":"8.8 EMP_sankey_plot","keywords":"","body":"8.8 EMP_sankey_plot Sankey diagram is a specific type of flow diagram that is often used to describe the interrelationships between multiple sets of features. The module EMP_sankey_plot can draw a correlation Sankey diagram based on the multiple correlation results calculated by the module EMP_cor_analysis. Note： ①In the plot, red represents positive relationship, while blue represents negative relationship. ②The correlation Sankey diagram assesses the relationships between each node, filtering out isolated nodes. ③Parameter pvalue and rvalue can set the filter threshold. &#x1F3F7;️Example： micro_data EMP_assay_extract('taxonomy') |> EMP_identify_assay(method='default') |> EMP_collapse(estimate_group = 'Genus',collapse_by = 'row') |> EMP_decostand(method='relative') ko_data EMP_assay_extract('geno_ko') |> EMP_identify_assay(method='edgeR') |> EMP_diff_analysis(method='DESeq2',.formula = ~Region+Group) |> EMP_filter(feature_condition = pvalue EMP_assay_extract(experiment = 'untarget_metabol') |> EMP_collapse(estimate_group = 'MS2kegg',collapse_by='row', na_string = c(\"NA\", \"null\", \"\",\"-\"), method = 'mean',collapse_sep = '+') |> EMP_decostand(method = 'relative') |> EMP_dimension_analysis(method = 'pls',estimate_group = 'Group') |> EMP_filter(feature_condition = VIP >2) host_gene EMP_assay_extract('host_gene') |> EMP_identify_assay(method='edgeR') |> EMP_diff_analysis(method='DESeq2',.formula = ~Region+Group) |> EMP_filter(feature_condition = pvalue EMP_assay_extract('taxonomy') |> EMP_coldata_extract(action = 'add', coldata_to_assay = c('SAS','SDS','HAMA','HAMD','PHQ9','GAD7')) (micro_data + ko_data + metabolite_data + host_gene + meta_data) |> EMP_cor_analysis() |> EMP_sankey_plot() Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 20:22:31 "},"MD/8.9 结构柱状图 EMP_structure_plot.html":{"url":"MD/8.9 结构柱状图 EMP_structure_plot.html","title":"8.9 EMP_structure_plot","keywords":"","body":"8.9 EMP_structure_plot The structure diagram is mainly used to show the top features in the data. For example, in microbiome data, the relative abundance of the top 10 species can be used to show the main composition of microorganisms. 8.9.1 For microbial data Note： ①The inside palette provides 15 colors for top features. To plot more features, users need set more color by the parameter palette. ②The parameter method can select the top features by mean, median, max, and min method. &#x1F3F7;️Example 1：Plot the Top 10 taxa with relative abundance at Class level. MAE |> EMP_assay_extract('taxonomy') |> EMP_decostand(method = 'relative') |> EMP_collapse(estimate_group = 'Class',collapse_by = 'row') |> EMP_structure_plot(top_num=10) &#x1F3F7;️Example 2：Plot the top 10 taxa based on group. MAE |> EMP_assay_extract('taxonomy') |> EMP_decostand(method = 'relative') |> EMP_collapse(estimate_group = 'Class',collapse_by = 'row') |> EMP_structure_plot(top_num=10,estimate_group='Group') &#x1F3F7;️Example 3： Plot the top 10 taxa with relative abundance at Class level based on Sex group. MAE |> EMP_assay_extract('taxonomy') |> EMP_collapse(estimate_group = 'Sex',collapse_by = 'col') |> EMP_decostand(method = 'relative') |> EMP_collapse(estimate_group = 'Class',collapse_by = 'row') |> EMP_structure_plot(top_num=10) 8.9.2 For genomics data The structure diagram can be used to show the distribution of top genomic features. &#x1F3F7;️Example：Plot the top 10 genes after difference analysis. MAE |> EMP_assay_extract('host_gene') |> EMP_diff_analysis(method = 'deseq2',.formula = ~Group) |> EMP_filter(feature_condition = pvalue EMP_structure_plot(top_num=5) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 20:26:45 "},"MD/8.10 火山图 EMP_volcanol_plot.html":{"url":"MD/8.10 火山图 EMP_volcanol_plot.html","title":"8.10 EMP_volcanol_plot","keywords":"","body":"8.10 EMP_volcanol_plot The module EMP_volcanol_plot is designed for the difference analysis result. 8.10.1 Basic vocanol plot Note： The parameter show provides html document. &#x1F3F7;️Example: MAE |> EMP_decostand(experiment = 'geno_ec',method = 'integer') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_volcanol_plot(show='html') 8.10.2 Vocanol plot with markers Note： The module inherits the geom_text_repel from the ggrepel package. &#x1F3F7;️Example 1: MAE |> EMP_decostand(experiment = 'geno_ec',method = 'integer') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_volcanol_plot(key_feature = c('3.6.1.62','1.5.3.19'),show='pic', min.segment.length = 0, seed = 42, box.padding = 0.5) &#x1F3F7;️Example 2: MAE |> EMP_decostand(experiment = 'geno_ec',method = 'integer') |> EMP_diff_analysis(method='DESeq2',.formula = ~Group) |> EMP_volcanol_plot(key_feature = c('3.6.1.62','1.5.3.19'),color = \"white\", bg.color = \"grey30\",bg.r = 0.15) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 20:28:09 "},"MD/9 更多有用函数.html":{"url":"MD/9 更多有用函数.html","title":"Chapter 9 More useful tools","keywords":"","body":"9. More useful functions This section introduces many amazing functions to make the data analysis workflow streamlined. 9.1 CorRcpp The function CorRcpp incorporates C++ language to speed up the process largely. data_df1 Compared to other commonly used correlation tools, the function CorRcpp in the EasyMultiProfiler offers a significant speed advantage, allowing users to efficiently build large correlation matrices between genes or features during multi-omics analyses. Users can directly leverage this advantage in the EMP_cor_analysis module and export the resulting matrix to specialized network analysis tools such as Cytoscape, MENA and Gephi. # Create the data matrix nrows 9.2 str_detect_multi The function str_detect_multi could help multi-detect the presence/absence of a match. Note： ①The function str_detect_multi can match multiple strings of interest at the same time.②The parameter exact support match partly and completely. text In addition, str_detect_multi can also help in the EasyMultiProfiler data analysis pipeline. &#x1F3F7;️Example 1：Extract microbial data from the Bacteroidetes and Firmicutes at Phylum level. MAE |> EMP_assay_extract('taxonomy') |> EMP_filter(feature_condition = str_detect_multi(Phylum,c('Bacteroidetes','Firmicutes'))) &#x1F3F7;️Example 2：Kick out the taxa without annotation. MAE |> EMP_assay_extract('taxonomy') |> EMP_filter(feature_condition = !str_detect_multi(Class,'unclassified')) 9.3 EMP_to_EMP1 In the EasyMultiProfiler data analysis process, the function could easily export microbial data into a data list for the EasyMicroPlot package. 注意： ①When exporting data, it is necessary to add full annotations in EMP_feature_convert.②The function could not work before collapsing microbial level. &#x1F3F7;️Example：Export microbial data and perform co-occurrence network analysis in the EasyMicroPlot package. # Get the data from EasyMultiProfiler MAE |> EMP_assay_extract('taxonomy') |> EMP_feature_convert(from = 'tax_single',add = 'tax_full') |> EMP_to_EMP1(estimate_group = 'Group') -> deposit # Work in the EasyMicroPlot library(EasyMicroPlot) cooc_re Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-09-06 11:46:28 "},"MD/10 示例教程.html":{"url":"MD/10 示例教程.html","title":"Chapter 10 More Examples","keywords":"","body":"10. Examples This section provides practical project examples and convenient procedures for the EasyMultiProfiler data analysis workflow, aiming to help users quickly understand and implement various useful analysis strategies. If you have any specific tasks or suggestions, please visit our GitHub Issues. We will address your questions promptly and update the tutorial with widely relevant examples. Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-22 14:03:37 "},"MD/10.1 表型数据重分组.html":{"url":"MD/10.1 表型数据重分组.html","title":"10.1 Meta data modified","keywords":"","body":"10.1 Deal with the sample-related data When analyzing data with the EasyMultiProfiler package, it’s often necessary to re-group samples. Instead of modifying the original data and re-create the MAE object, users can use the $ methods and tidy syntax to address the problem efficiently. 10.1.1 Regroup the samples &#x1F3F7;️Example： Firstly, extract the coldata of taxonomy. Then, create a new variable Edu_status from the original Education_Years variable (using this new variable for grouping), and finally add the new variable back into the original MAE object using the $method. Note： The primary order in the new coldata and original coldata must be the same exactly. raw_meta EMP_coldata_extract(experiment = 'taxonomy') new_meta dplyr::mutate(Edu_status = dplyr::if_else(Education_Years > 15, \"High\", \"Low\")) new_meta 10.1.2 Reorder the group Sometimes, it is necessary to reorder groupings in the plot. &#x1F3F7;️Example： MAE$Group EMP_assay_extract(experiment='taxonomy') |> EMP_alpha_analysis() |> EMP_boxplot(estimate_group='Group',method='t.test') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 20:56:03 "},"MD/10.2 实验数据快速处理.html":{"url":"MD/10.2 实验数据快速处理.html","title":"10.2 Experiment data","keywords":"","body":"10.2 Rapid processing of experimental data In biological experiments, it is often necessary to perform rapid processing and analysis of experimental data (e.g., counting mouse weight, calculating QPCR results, etc.). Complex statistical analysis can be done quickly by datapasta and EasyMultiProfiler packages. &#x1F3F7;️Example： Quick calculation of mouse weighing data. Step1：Copy the data in an excel file and execute the command below in R. datapasta::tribble_paste() Step2：In the Rstudio, the copied data has been automatically organized into tribble format. Step3：Easily import the data into the MAE object. coldata dplyr::select(Num,cage,week,Group) |> tibble::column_to_rownames('Num') assay_data dplyr::select(Num,weight) |> tibble::column_to_rownames('Num') |> t() |> as.data.frame() |> tibble::rownames_to_column('feature') MAE Step4：Perform data analysis. Observe the approximate distribution of mouse body weight. MAE |> EMP_assay_extract('experiment') |> EMP_structure_plot(estimate_group='Group') Compare the body weight in different groups. MAE |> EMP_assay_extract('experiment') |> EMP_boxplot(estimate_group='Group',method='t.test') MAE |> EMP_assay_extract('experiment') |> EMP_boxplot(estimate_group='cage',method='t.test') Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 20:58:34 "},"MD/10.3 配对队列的处理方案.html":{"url":"MD/10.3 配对队列的处理方案.html","title":"10.3 Paired test and intervention corhort","keywords":"","body":"10.3 Paired tests for cohorts In studies, it is often necessary to analyze the same cohort of subjects before and after the intervention (e.g. comparison of gut microflora before and after probiotic intervention in ulcerative colitis patients) and perform pair-wise testing. To ensure that paired tests work properly, subject numbers need to be specially numbered when importing data. &#x1F3F7;️Example： Step1: Process sample-related data. To comply with the ordering requirements of the paired test, characters A and B were added to the subject number in the primary column to distinguish between pre- and post-intervention, respectively. Step2: Process the relationship table. If users need to import multi-omics data, the relationship table is also processed in the same way as step 1. **Step3: **Paired difference analysis. Perform a paired difference test with the parameter `paired=TRUE` Note： ①The following codes are for display only, and there is no paired data in the example data. ②The modules EMP_boxplot and EMP_scatterplot are designed to quickly visualize the results of difference tests, but cannot complete paired tests or ANOVA calculations. The user can manually modify the plot based on the result from module EMP_diff_analysis. MAE |> EMP_assay_extract(experiment = 'taxonomy') |> EMP_diff_analysis(method = 'wilcox.test',estimate_group = 'Group',paired=TRUE) Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-31 21:03:43 "},"MD/Contact.html":{"url":"MD/Contact.html","title":"Contact","keywords":"","body":"Contact us 😃😃😃Thank you very much for using EasyMultiProfiler。 📬📬📬We welcome any contribution, including but not limited to code, ideas, and tutorials. Please report errors and questions on GitHub Issues or email us. E-Mail: dr_liubingdong@qq.com✉️ E-Mail:xielw@gdim.cn ✉️ 👇👇👇If our package helps your studies publish, please cite our paper below: Copyright © 382983280@qq.com 2024 all right reserved，powered by Gitbook更新时间： 2024-08-20 15:04:38 "}}